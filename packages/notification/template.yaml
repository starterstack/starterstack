AWSTemplateFormatVersion: 2010-09-09
Transform:
  - AWS::LanguageExtensions
  - AWS::Serverless-2016-10-31

Description: Notification

Globals:
  Function:
    Tracing: Active
    Architectures:
      - arm64
    Runtime: nodejs20.x
    PropagateTags: true
    Environment:
      Variables:
        STACK_NAME: !Ref Stack
        STACK_ORIGIN: !Ref StageRoot
        GIT_COMMIT: !Ref GITCommit

Parameters:
  Stack:
    Type: String
  Stage:
    Type: String
  StageRoot:
    Type: String
  StageRootUrl:
    Type: String
  SentryDSN:
    Type: String
  SentryEnvironment:
    Type: String
  LogRetentionInDays:
    Type: String
  GITCommit:
    Type: String
  EventBusName:
    Type: String
  SESTemplateHelloResponseEn:
    Type: String
  SESTemplateLoginSignupEn:
    Type: String
  SESDefaultConfigurationSet:
    Type: String
  SNSAlarmTopic:
    Type: String

Metadata:
  expand:
    plugins:
      - '../git.mjs'
      - '../hash.mjs'
      - '@starterstack/sam-expand/plugins/parameter-overrides'
      - '../stack-stage-config.mjs'
      - '@starterstack/sam-expand/plugins/run-script-hooks'
      - '../purge-lambda-versions.mjs'
      - '../generate-cloudwatch-alarms.mjs'

    config:
      stackStageConfig:
        suffixStage: true
        addMappings: true
      parameterOverrides:
        - location: ../stack-stage-config.mjs
          overrides:
            - name: SNSAlarmTopic
              exportName: snsAlarmTopic
            - name: Stage
              exportName: stage
            - name: StageRoot
              exportName: stageOrStackRoot
            - name: StageRootUrl
              exportName: stageRootUrl
            - name: SentryDSN
              exportName: sentryDSN
            - name: SentryEnvironment
              exportName: sentryEnvironment
            - name: LogRetentionInDays
              exportName: logRetentionInDays
            - name: EventBusName
              exportName: eventBusName
            - name: SESTemplateLoginSignupEn
              exportName: sesTemplateLoginSignupEn
            - name: SESTemplateHelloResponseEn
              exportName: sesTemplateHelloResponseEn
            - name: SESDefaultConfigurationSet
              exportName: sesDefaultConfigurationSet
        - location: ../git.mjs
          overrides:
            - name: GITCommit
              exportName: commit
      purgeLambdaVersions:
        keep: 3
      script:
        hooks:
          post:deploy:
            - command: ../tag-eventbus-rules.sh
              args:
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: stackName
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: region
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: stage
            - command: ../tag-cloudwatch-alarms.sh
              args:
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: stackName
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: region
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: stage
      alarms:
        snsTopicRef: SNSAlarmTopic

Resources:
  CloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}
      RetentionInDays: !Ref LogRetentionInDays
      Tags:
        - Key: 'Name'
          Value: !Sub '${AWS::StackName} lambda logs'
        - Key: 'ManagedBy'
          Value: !Ref Stack
  EventsDlq:
    Type: AWS::SQS::Queue
    Properties:
      SqsManagedSseEnabled: true
      Tags:
        - Key: 'Name'
          Value: !Sub '${AWS::StackName}-events-dlq'
        - Key: 'ManagedBy'
          Value: !Ref Stack
  EventsDlqPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - 'sqs:SendMessage'
            Principal:
              Service: 'events.amazonaws.com'
            Resource: !GetAtt EventsDlq.Arn
            Condition:
              ArnEquals:
                'aws:SourceArn': !Sub 'arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/${AWS::StackName}*'
          - Effect: Allow
            Action:
              - 'sqs:SendMessage'
            Principal:
              Service: 'sns.amazonaws.com'
            Resource: !GetAtt EventsDlq.Arn
            Condition:
              ArnEquals:
                'aws:SourceArn': !Sub 'arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:${AWS::StackName}*'
      Queues:
        - !Ref EventsDlq
  LambdaDlq:
    Type: AWS::SQS::Queue
    Properties:
      SqsManagedSseEnabled: true
      Tags:
        - Key: 'Name'
          Value: !Sub ${AWS::StackName}-lambda-dlq
        - Key: 'ManagedBy'
          Value: !Ref Stack

  LoginEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/login-email/
      Handler: index.handler
      Description: 'send login email'
      Timeout: 6
      MemorySize: 128
      Environment:
        Variables:
          SES_LOGIN_TEMPLATE_EN: !Ref SESTemplateLoginSignupEn
          SES_EMAIL_FROM: !Sub noreply@${StageRoot}
      Policies:
        - Version: 2012-10-17
          Statement:
            - Sid: SES
              Effect: Allow
              Action:
                - 'ses:SendTemplatedEmail'
              Resource:
                - !Sub 'arn:${AWS::Partition}:ses:eu-west-1:${AWS::AccountId}:identity/${StageRoot}'
                - !Sub 'arn:${AWS::Partition}:ses:eu-west-1:${AWS::AccountId}:configuration-set/${SESDefaultConfigurationSet}'
                - !Sub 'arn:${AWS::Partition}:ses:eu-west-1:${AWS::AccountId}:template/${SESTemplateLoginSignupEn}'
        - SQSSendMessagePolicy:
            QueueName: !GetAtt LambdaDlq.QueueName
        - Version: 2012-10-17
          Statement:
            - Sid: CloudWatchLogGroup
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !GetAtt CloudWatchLogGroup.Arn
              Effect: Allow
      LoggingConfig:
        LogGroup: !Ref CloudWatchLogGroup
      Events:
        Trigger:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref EventBusName
            Pattern:
              source:
                - email
              detail-type:
                - 'login/signup'
              detail:
                taskToken:
                  - exists: false
                email:
                  - anything-but:
                      - 'test+signup@example.com'
                      - 'test+login@example.com'
            DeadLetterConfig:
              Arn: !GetAtt EventsDlq.Arn
            RetryPolicy:
              MaximumEventAgeInSeconds: 900
              MaximumRetryAttempts: 3
      DeadLetterQueue:
        TargetArn: !GetAtt LambdaDlq.Arn
        Type: SQS
      EventInvokeConfig:
        DestinationConfig:
          OnFailure:
            Type: SQS
            Destination: !GetAtt LambdaDlq.Arn
        MaximumEventAgeInSeconds: 900
        MaximumRetryAttempts: 2
    Metadata:
      BuildMethod: makefile

  HelloEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/hello/
      Handler: index.handler
      Description: 'send hello reply email'
      Timeout: 6
      MemorySize: 128
      Environment:
        Variables:
          SES_HELLO_TEMPLATE_EN: !Ref SESTemplateHelloResponseEn
          SES_EMAIL_FROM: !Sub noreply@${StageRoot}
      Policies:
        - Version: 2012-10-17
          Statement:
            - Sid: SES
              Effect: Allow
              Action:
                - 'ses:SendTemplatedEmail'
              Resource:
                - !Sub 'arn:${AWS::Partition}:ses:eu-west-1:${AWS::AccountId}:identity/${StageRoot}'
                - !Sub 'arn:${AWS::Partition}:ses:eu-west-1:${AWS::AccountId}:configuration-set/${SESDefaultConfigurationSet}'
                - !Sub 'arn:${AWS::Partition}:ses:eu-west-1:${AWS::AccountId}:template/${SESTemplateHelloResponseEn}'
        - SQSSendMessagePolicy:
            QueueName: !GetAtt LambdaDlq.QueueName
        - Version: 2012-10-17
          Statement:
            - Sid: CloudWatchLogGroup
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !GetAtt CloudWatchLogGroup.Arn
              Effect: Allow
      LoggingConfig:
        LogGroup: !Ref CloudWatchLogGroup
      Events:
        Trigger:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref EventBusName
            Pattern:
              source:
                - email
              detail-type:
                - 'hello'
            DeadLetterConfig:
              Arn: !GetAtt EventsDlq.Arn
            RetryPolicy:
              MaximumEventAgeInSeconds: 900
              MaximumRetryAttempts: 3
      DeadLetterQueue:
        TargetArn: !GetAtt LambdaDlq.Arn
        Type: SQS
      EventInvokeConfig:
        DestinationConfig:
          OnFailure:
            Type: SQS
            Destination: !GetAtt LambdaDlq.Arn
        MaximumEventAgeInSeconds: 900
        MaximumRetryAttempts: 2
    Metadata:
      BuildMethod: makefile

  SentryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/sentry/
      Handler: index.handler
      Description: 'send cloudwatch logs to sentry'
      Timeout: 6
      MemorySize: 128
      Environment:
        Variables:
          SENTRY_DSN: !Ref SentryDSN
          SENTRY_ENVIRONMENT: !Ref SentryEnvironment
          SENTRY_TUNNEL: !Sub ${StageRootUrl}/api/rest/sentry-tunnel
          STAGE: !Ref Stage
      Policies:
        - Version: 2012-10-17
          Statement:
            - Sid: CloudWatchLogGroup
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !GetAtt CloudWatchLogGroup.Arn
              Effect: Allow
      LoggingConfig:
        LogGroup: !Ref CloudWatchLogGroup
      # TODO add triggers when the log groups exist

    Metadata:
      BuildMethod: makefile
