AWSTemplateFormatVersion: 2010-09-09
Transform:
  - AWS::LanguageExtensions
  - AWS::Serverless-2016-10-31

Description: CloudFront us-east-1 resources

Globals:
  Function:
    Tracing: Active
    Architectures:
      - arm64
    Runtime: nodejs20.x
    PropagateTags: true
    Environment:
      Variables:
        GIT_COMMIT: !Ref GITCommit

Parameters:
  Stack:
    Type: String
  Stage:
    Type: String
  StageRootUrl:
    Type: String
  LogRetentionInDays:
    Type: String
  SNSAlarmTopic:
    Type: String
  GITCommit:
    Type: String
  SentryDSN:
    Type: String
  SentryEnvironment:
    Type: String

Metadata:
  expand:
    plugins:
      - '../git.mjs'
      - '../hash.mjs'
      - '../stack-stage-config.mjs'
      - '@starterstack/sam-expand/plugins/parameter-overrides'
      - '@starterstack/sam-expand/plugins/run-script-hooks'
      - '../generate-cloudwatch-alarms.mjs'
    config:
      stackStageConfig:
        suffixStage: true
        addMappings: true
      parameterOverrides:
        - location: ../stack-stage-config.mjs
          overrides:
            - name: StageRootUrl
              exportName: stageRootUrl
            - name: SentryDSN
              exportName: sentryDSN
            - name: SentryEnvironment
              exportName: sentryEnvironment
            - name: LogRetentionInDays
              exportName: logRetentionInDays
            - name: SNSAlarmTopic
              exportName: snsAlarmTopic
            - name: LogRetentionInDays
              exportName: logRetentionInDays
      script:
        hooks:
          post:deploy:
            - command: ../tag-cloudwatch-alarms.sh
              args:
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: stackName
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: region
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: stage

          post:delete:
            - command: ./scripts/delete-dangling-acm-certificates.mjs
              args:
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: zoneId

      alarms:
        snsTopicRef: SNSAlarmTopic

Conditions:
  IsWafEnabled: !Equals
    - !FindInMap
      - AWSAccounts
      - !Ref 'AWS::AccountId'
      - wafEnabled
    - true

Resources:
  CloudFrontWafLogGroup:
    Type: AWS::Logs::LogGroup
    Condition: IsWafEnabled
    Properties:
      LogGroupName: !Sub 'aws-waf-logs-cloudfront/${AWS::StackName}'
      RetentionInDays: !Ref LogRetentionInDays
      Tags:
        - Key: 'Name'
          Value: !Sub '${AWS::StackName} waf acl log group for cloudfront'
        - Key: 'ManagedBy'
          Value: !Ref Stack

  CloudFrontWafAcl:
    Type: AWS::WAFv2::WebACL
    Condition: IsWafEnabled
    Properties:
      DefaultAction:
        Allow: {}
      Scope: CLOUDFRONT
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: !Sub '${AWS::StackName}-waf-acl-cloudfront'
      Rules:
        - Name: RateLimit
          Priority: 0
          Action:
            Block:
              CustomResponse:
                ResponseCode: 429
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: !Sub '${AWS::StackName}-waf-acl-cloudfront-rate-limit'
          Statement:
            RateBasedStatement:
              AggregateKeyType: IP
              Limit: 1000
        - Name: AWS-AWSManagedRulesCommonRuleSet
          Priority: 1
          OverrideAction:
            None: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: !Sub '${AWS::StackName}-waf-acl-cloudfront-common'
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesCommonRuleSet
              ExcludedRules:
                - Name: 'SizeRestrictions_BODY'
                - Name: 'NoUserAgent_HEADER'
        - Name: block-too-large-body-requests
          Priority: 2
          Statement:
            AndStatement:
              Statements:
                - LabelMatchStatement:
                    Scope: LABEL
                    Key: awswaf:managed:aws:core-rule-set:SizeRestrictions_Body
                - NotStatement:
                    Statement:
                      ByteMatchStatement:
                        SearchString: '/api/rest/sentry-tunnel'
                        FieldToMatch:
                          UriPath: {}
                        TextTransformations:
                          - Priority: 0
                            Type: NONE
                        PositionalConstraint: STARTS_WITH
          Action:
            Block: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: !Sub '${AWS::StackName}-waf-acl-cloudfront-block-too-large-body-requests'
        - Name: block-missing-user-agent
          Priority: 3
          Statement:
            AndStatement:
              Statements:
                - LabelMatchStatement:
                    Scope: LABEL
                    Key: awswaf:managed:aws:core-rule-set:NoUserAgent_Header
                - NotStatement:
                    Statement:
                      ByteMatchStatement:
                        SearchString: '/api/rest/sentry-tunnel'
                        FieldToMatch:
                          UriPath: {}
                        TextTransformations:
                          - Priority: 0
                            Type: NONE
                        PositionalConstraint: STARTS_WITH
          Action:
            Block: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: !Sub '${AWS::StackName}-waf-acl-cloudfront-block-missing-user-agent'
        - Name: AWS-ManagedRulesKnownBadInputsRuleSet
          Priority: 4
          OverrideAction:
            None: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: !Sub '${AWS::StackName}-waf-acl-cloudfront-bad-inputs'
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesKnownBadInputsRuleSet
        - Name: AWS-ManagedRulesAmazonIpReputationList
          Priority: 5
          OverrideAction:
            None: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: !Sub '${AWS::StackName}-waf-acl-cloudfront-ip-reputation'
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesAmazonIpReputationList

  CloudFrontWaLogging:
    Type: AWS::WAFv2::LoggingConfiguration
    Condition: IsWafEnabled
    Properties:
      LogDestinationConfigs:
        - !Select [0, !Split [':*', !GetAtt CloudFrontWafLogGroup.Arn]]
      LoggingFilter:
        DefaultBehavior: DROP
        Filters:
          - Behavior: KEEP
            Conditions:
              - ActionCondition:
                  Action: BLOCK
            Requirement: MEETS_ANY
      ResourceArn: !GetAtt CloudFrontWafAcl.Arn

  CloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}
      RetentionInDays: !Ref LogRetentionInDays
      Tags:
        - Key: 'Name'
          Value: !Sub '${AWS::StackName} lambda logs'
        - Key: 'ManagedBy'
          Value: !Ref Stack

  SentryFunction:
    Condition: IsWafEnabled
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/sentry/
      Handler: index.handler
      Description: 'send waf cloudwatch logs to sentry'
      Timeout: 6
      MemorySize: 128
      Environment:
        Variables:
          SENTRY_DSN: !Ref SentryDSN
          SENTRY_ENVIRONMENT: !Ref SentryEnvironment
          SENTRY_TUNNEL: !Sub ${StageRootUrl}/api/rest/sentry-tunnel
          STAGE: !Ref Stage
      Policies:
        - Version: 2012-10-17
          Statement:
            - Sid: CloudWatchLogGroup
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !GetAtt CloudWatchLogGroup.Arn
              Effect: Allow
      LoggingConfig:
        LogGroup: !Ref CloudWatchLogGroup
    Metadata:
      BuildMethod: makefile

  CloudWatchLogGroupSubscriptionFilter:
    Condition: IsWafEnabled
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !GetAtt SentryFunction.Arn
      FilterName: Lambda
      FilterPattern: '{$.httpRequest.uri != "*sentry-tunnel*"}'
      LogGroupName: !Ref CloudFrontWafLogGroup

  CloudWatchSubscriptionFunctionPermission:
    Condition: IsWafEnabled
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt SentryFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: 'logs.amazonaws.com'
      SourceArn: !GetAtt CloudFrontWafLogGroup.Arn

Outputs:
  CloudFrontWafLogGroup:
    Condition: IsWafEnabled
    Description: CloudFront waf log group
    Value: !Ref CloudFrontWafLogGroup
    Export:
      Name: !Sub '${AWS::StackName}CloudFrontWafLogGroup'

  CloudFrontWafACL:
    Condition: IsWafEnabled
    Description: CloudFront waf acl
    Value: !GetAtt CloudFrontWafAcl.Arn
    Export:
      Name: !Sub '${AWS::StackName}CloudFrontWafAcl'
