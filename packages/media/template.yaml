AWSTemplateFormatVersion: 2010-09-09
Transform:
  - AWS::LanguageExtensions
  - AWS::Serverless-2016-10-31

Description: Media

Globals:
  Function:
    Tracing: Active
    Architectures:
      - arm64
    Runtime: nodejs20.x
    PropagateTags: true
    Environment:
      Variables:
        GIT_COMMIT: !Ref GITCommit
        STAGE_ORIGIN: !Ref StageRoot

Parameters:
  Stack:
    Type: String
  StageRootUrl:
    Type: String
  Stage:
    Type: String
  AccountPerStage:
    Type: String
  LogRetentionInDays:
    Type: String
  StageRoot:
    Type: String
  S3BackupBucket:
    Type: String
  BackupRegion:
    Type: String
  GITCommit:
    Type: String
  DynamoDBStackTableName:
    Type: String
  DynamoDBStackAuditTableName:
    Type: String
  StageUrl:
    Type: String
  EventBusName:
    Type: String
  SNSAlarmTopic:
    Type: String

Metadata:
  expand:
    plugins:
      - '../git.mjs'
      - '../hash.mjs'
      - '@starterstack/sam-expand/plugins/parameter-overrides'
      - '../stack-stage-config.mjs'
      - '@starterstack/sam-expand/plugins/run-script-hooks'
      - '../purge-lambda-versions.mjs'
      - '../generate-cloudwatch-alarms.mjs'

    config:
      stackStageConfig:
        suffixStage: true
        addMappings: true
      parameterOverrides:
        - location: ../stack-stage-config.mjs
          overrides:
            - name: SNSAlarmTopic
              exportName: snsAlarmTopic
            - name: Stage
              exportName: stage
            - name: StageRootUrl
              exportName: stageRootUrl
            - name: AccountPerStage
              exportName: accountPerStage
            - name: StageRoot
              exportName: stageOrStackRoot
            - name: S3BackupBucket
              exportName: ssmS3BackupBucket
            - name: BackupRegion
              exportName: backupRegion
            - name: LogRetentionInDays
              exportName: logRetentionInDays
            - name: DynamoDBStackTableName
              exportName: dynamodbStackTableName
            - name: DynamoDBStackAuditTableName
              exportName: dynamodbStackAuditTableName
            - name: StageUrl
              exportName: stageRootUrl
            - name: EventBusName
              exportName: eventBusName
        - location: ../git.mjs
          overrides:
            - name: GITCommit
              exportName: commit
      purgeLambdaVersions:
        keep: 3
      script:
        hooks:
          pre:delete:
            - command: ../empty-s3-bucket.sh
              args:
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: s3Media
            - command: ../empty-s3-bucket.sh
              args:
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: s3ProtectedMedia
            - command: ../empty-s3-bucket.sh
              args:
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: s3Static
            - command: ../empty-s3-bucket.sh
              args:
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: s3ProtectedMediaLogs
          post:deploy:
            - command: ../tag-eventbus-rules.sh
              args:
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: stackName
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: region
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: stage
            - command: ../tag-cloudwatch-alarms.sh
              args:
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: stackName
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: region
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: stage
      alarms:
        snsTopicRef: SNSAlarmTopic

Conditions:
  IsDynamoDBPointInTimeDailyS3ExportsEnabled: !Equals
    - !FindInMap
      - AWSAccounts
      - !Ref 'AWS::AccountId'
      - dynamodbPointInTimeDailyS3ExportsEnabled
      - DefaultValue: 'false'
    - true
  ShouldReplicate: !And
    - !Equals
      - !Ref AccountPerStage
      - 'true'
    - !Equals
      - !Ref Stage
      - 'prod'

Resources:
  CloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}
      RetentionInDays: !Ref LogRetentionInDays
      Tags:
        - Key: 'Name'
          Value: !Sub '${AWS::StackName} lambda logs'
        - Key: 'ManagedBy'
          Value: !Ref Stack
  EventsDlq:
    Type: AWS::SQS::Queue
    Properties:
      SqsManagedSseEnabled: true
      Tags:
        - Key: 'Name'
          Value: !Sub '${AWS::StackName}-events-dlq'
        - Key: 'ManagedBy'
          Value: !Ref Stack
  EventsDlqPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - 'sqs:SendMessage'
            Principal:
              Service: 'events.amazonaws.com'
            Resource: !GetAtt EventsDlq.Arn
            Condition:
              ArnEquals:
                'aws:SourceArn': !Sub 'arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/${AWS::StackName}*'
          - Effect: Allow
            Action:
              - 'sqs:SendMessage'
            Principal:
              Service: 'sns.amazonaws.com'
            Resource: !GetAtt EventsDlq.Arn
            Condition:
              ArnEquals:
                'aws:SourceArn': !Sub 'arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:${AWS::StackName}*'
      Queues:
        - !Ref EventsDlq
  LambdaDlq:
    Type: AWS::SQS::Queue
    Properties:
      SqsManagedSseEnabled: true
      Tags:
        - Key: 'Name'
          Value: !Sub ${AWS::StackName}-lambda-dlq
        - Key: 'ManagedBy'
          Value: !Ref Stack
  S3Static:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: TransitionToIntelligentTiering
            Status: Enabled
            Transitions:
              - StorageClass: INTELLIGENT_TIERING
                TransitionInDays: 0
          - Id: NonCurrentRetention
            Status: Enabled
            NoncurrentVersionExpiration:
              NewerNoncurrentVersions: 3
              NoncurrentDays: 7
          - Id: DeleteNonCurrent
            ExpiredObjectDeleteMarker: true
            Status: Enabled
      AccelerateConfiguration:
        AccelerationStatus: Enabled
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: 'Name'
          Value: !Sub ${AWS::StackName}-static
        - Key: 'ManagedBy'
          Value: !Ref Stack

  S3Media:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: TransitionToIntelligentTiering
            Status: Enabled
            Prefix: media
            Transitions:
              - StorageClass: INTELLIGENT_TIERING
                TransitionInDays: 0
          - Id: ExpireTemp
            Status: Enabled
            ExpirationInDays: 1
            Prefix: temp
          - Id: NonCurrentRetentionMedia
            Status: Enabled
            Prefix: media
            NoncurrentVersionExpiration:
              NewerNoncurrentVersions: 3
              NoncurrentDays: 7
          - Id: NonCurrentRetentionTemp
            Status: Enabled
            Prefix: temp
            NoncurrentVersionExpiration:
              NoncurrentDays: 1
          - Id: DeleteNonCurrent
            ExpiredObjectDeleteMarker: true
            Status: Enabled
      AccelerateConfiguration:
        AccelerationStatus: Enabled
      CorsConfiguration:
        CorsRules:
          - AllowedMethods:
              - POST
            AllowedOrigins:
              - !Ref StageRootUrl
              - http://localhost:5001
            MaxAge: 600
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
      VersioningConfiguration:
        Status: Enabled
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
      MetricsConfigurations:
        - Id: !Sub ${AWS::StackName}-media-temp-filter
          Prefix: temp
      Tags:
        - Key: 'Name'
          Value: !Sub ${AWS::StackName}-media
        - Key: 'ManagedBy'
          Value: !Ref Stack

  S3ProtectedMedia:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: TransitionToIntelligentTiering
            Status: Enabled
            Prefix: media
            Transitions:
              - StorageClass: INTELLIGENT_TIERING
                TransitionInDays: 0
          - Id: ExpireTemp
            Status: Enabled
            ExpirationInDays: 1
            Prefix: temp
          - Id: ExpirePdf
            Status: Enabled
            ExpirationInDays: 1
            Prefix: pdf
          - Id: ExpireDynamoDBBackups
            Status: Enabled
            ExpirationInDays: 31
            Prefix: AWSDynamoDB
          - Id: NonCurrentRetentionMedia
            Status: Enabled
            Prefix: media
            NoncurrentVersionExpiration:
              NewerNoncurrentVersions: 3
              NoncurrentDays: 7
          - Id: NonCurrentRetentionTemp
            Status: Enabled
            Prefix: temp
            NoncurrentVersionExpiration:
              NoncurrentDays: 1
          - Id: NonCurrentRetentionPdf
            Status: Enabled
            Prefix: pdf
            NoncurrentVersionExpiration:
              NoncurrentDays: 1
          - Id: NonCurrentRetentionDBBackups
            Status: Enabled
            Prefix: AWSDynamoDB
            NoncurrentVersionExpiration:
              NoncurrentDays: 1
          - Id: AbortIncompleteMultipartUpload
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
            Prefix: temp
          - Id: DeleteNonCurrent
            ExpiredObjectDeleteMarker: true
            Status: Enabled
      AccelerateConfiguration:
        AccelerationStatus: Enabled
      CorsConfiguration:
        CorsRules:
          - AllowedMethods:
              - POST
            AllowedOrigins:
              - !Ref StageRootUrl
              - http://localhost:5001
            MaxAge: 600
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
      VersioningConfiguration:
        Status: Enabled
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
      MetricsConfigurations:
        - Id: !Sub ${AWS::StackName}-protected-media-temp-filter
          Prefix: temp
      LoggingConfiguration:
        DestinationBucketName: !Ref S3ProtectedMediaLogs
      Tags:
        - Key: 'Name'
          Value: !Sub ${AWS::StackName}-protected-media
        - Key: 'ManagedBy'
          Value: !Ref Stack

  S3ProtectedMediaLogs:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: TransitionToIntelligentTiering
            Status: Enabled
            Transitions:
              - StorageClass: INTELLIGENT_TIERING
                TransitionInDays: 0
          - Id: ExpireLogs
            Status: Enabled
            ExpirationInDays: 7
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
      Tags:
        - Key: 'Name'
          Value: !Sub ${AWS::StackName}-protected-media-logs
        - Key: 'ManagedBy'
          Value: !Ref Stack

  S3ProtectedMediaLogsPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3ProtectedMediaLogs
      PolicyDocument:
        Version: '2012-10-17'
        Id: PolicyForAccessLoggingForProtectedMedia
        Statement:
          - Effect: Deny
            Action: 's3:*'
            Resource:
              - !Sub '${S3ProtectedMediaLogs.Arn}'
              - !Sub '${S3ProtectedMediaLogs.Arn}/*'
            Principal: '*'
            Condition:
              Bool:
                'aws:SecureTransport': false
          - Effect: Allow
            Action:
              - 's3:PutObject'
              - 's3:PutObjectACL'
            Resource:
              - !Sub '${S3ProtectedMediaLogs.Arn}/*'
            Condition:
              Bool:
                'aws:SecureTransport': true
              ArnLike:
                'aws:SourceArn': !GetAtt S3ProtectedMedia.Arn
              StringEquals:
                'aws:SourceAccount': !Sub '${AWS::AccountId}'
            Principal:
              Service: 'logging.s3.amazonaws.com'

  CreatePresignedPostFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-CreatePresignedPostFunction'
      CodeUri: functions/create-presigned-post/
      Handler: index.handler
      Description: 'create presigned url for direct upload to s3 media buckets'
      Timeout: 6
      MemorySize: 128
      Environment:
        Variables:
          PRESIGN_SECONDS_EXPIRY: 300
          UPLOAD_MB_LIMIT: 30
          STACK: !Ref Stack
          MEDIA_BUCKET: !Ref S3Media
          PROTECTED_MEDIA_BUCKET: !Ref S3ProtectedMedia
          DYNAMODB_STACK_TABLE: !Ref DynamoDBStackTableName
          BASE_URL: !Ref StageUrl
      Policies:
        - Version: 2012-10-17
          Statement:
            - Sid: S3
              Effect: Allow
              Action:
                - s3:PutObject
                - s3:PutObjectTagging
              Resource:
                - !Sub 'arn:${AWS::Partition}:s3:::${S3Media}/*'
                - !Sub 'arn:${AWS::Partition}:s3:::${S3ProtectedMedia}/*'
        - Version: 2012-10-17
          Statement:
            - Sid: DynamoDB
              Effect: Allow
              Action:
                - 'dynamodb:PutItem'
              Condition:
                ForAllValues:StringLike:
                  dynamodb:LeadingKeys:
                    - 'upload#*'
              Resource:
                - !Sub 'arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBStackTableName}'
        - Version: 2012-10-17
          Statement:
            - Sid: CloudWatchLogGroup
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !GetAtt CloudWatchLogGroup.Arn
              Effect: Allow
      LoggingConfig:
        LogGroup: !Ref CloudWatchLogGroup
    Metadata:
      BuildMethod: makefile

  S3TriggerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-S3TriggerFunction'
      CodeUri: functions/s3-trigger/
      Handler: index.handler
      Description: 'process uploads to s3 media buckets'
      Timeout: 40
      MemorySize: 1024
      Environment:
        Variables:
          MEDIA_BUCKET: !Ref S3Media
          PROTECTED_MEDIA_BUCKET: !Ref S3ProtectedMedia
          EVENTBRIDGE_BUS_NAME: !Ref EventBusName
          DYNAMODB_STACK_TABLE: !Ref DynamoDBStackTableName
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt LambdaDlq.QueueName
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref EventBusName
        - Version: 2012-10-17
          Statement:
            - Sid: S3
              Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
                - s3:ListBucket
                - s3:PutObjectTagging
                - s3:GetObjectTagging
              Resource:
                - !Sub 'arn:${AWS::Partition}:s3:::${S3Media}/*'
                - !Sub 'arn:${AWS::Partition}:s3:::${S3Media}'
                - !Sub 'arn:${AWS::Partition}:s3:::${S3ProtectedMedia}/*'
                - !Sub 'arn:${AWS::Partition}:s3:::${S3ProtectedMedia}'
        - Version: 2012-10-17
          Statement:
            - Sid: DynamoDB
              Action:
                - 'dynamodb:PutItem'
              Condition:
                ForAllValues:StringLike:
                  dynamodb:LeadingKeys:
                    - 'upload#*'
              Resource:
                - !Sub 'arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBStackTableName}'
              Effect: Allow
        - Version: 2012-10-17
          Statement:
            - Sid: CloudWatchLogGroup
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !GetAtt CloudWatchLogGroup.Arn
              Effect: Allow
      LoggingConfig:
        LogGroup: !Ref CloudWatchLogGroup
      Events:
        Trigger:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - 'aws.s3'
              detail-type:
                - 'Object Created'
              detail:
                bucket:
                  name:
                    - !Ref S3Media
                    - !Ref S3ProtectedMedia
                object:
                  key:
                    - prefix: temp
            DeadLetterConfig:
              Arn: !GetAtt EventsDlq.Arn
            RetryPolicy:
              MaximumEventAgeInSeconds: 900
              MaximumRetryAttempts: 3
      DeadLetterQueue:
        TargetArn: !GetAtt LambdaDlq.Arn
        Type: SQS
      EventInvokeConfig:
        DestinationConfig:
          OnFailure:
            Type: SQS
            Destination: !GetAtt LambdaDlq.Arn
        MaximumEventAgeInSeconds: 900
        MaximumRetryAttempts: 2
    Metadata:
      BuildMethod: makefile

  S3ReplicateFunction:
    Condition: ShouldReplicate
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-S3ReplicateFunction'
      CodeUri: functions/s3-replicate/
      Handler: index.handler
      Description: 'replicate media'
      Timeout: 6
      MemorySize: 128
      Environment:
        Variables:
          S3_BACKUP_BUCKET: !Ref S3BackupBucket
          S3_BACKUP_BUCKET_REGION: !Ref BackupRegion
      Policies:
        - Version: 2012-10-17
          Statement:
            - Sid: S3Read
              Action:
                - s3:GetObject
                - s3:GetObjectTagging
              Resource:
                - !Sub '${S3Media.Arn}/media/*'
                - !Sub '${S3ProtectedMedia.Arn}/media/*'
                - !Sub '${S3ProtectedMedia.Arn}/AWSDynamoDB/*'
              Effect: Allow
        - Version: 2012-10-17
          Statement:
            - Sid: S3Write
              Action:
                - s3:PutObject
                - s3:PutObjectACL
                - s3:PutObjectTagging
              Resource:
                - !Sub 'arn:${AWS::Partition}:s3:::${S3BackupBucket}/*'
              Effect: Allow
        - SQSSendMessagePolicy:
            QueueName: !GetAtt LambdaDlq.QueueName
        - Version: 2012-10-17
          Statement:
            - Sid: CloudWatchLogGroup
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !GetAtt CloudWatchLogGroup.Arn
              Effect: Allow
      LoggingConfig:
        LogGroup: !Ref CloudWatchLogGroup
      Events:
        Trigger:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - 'aws.s3'
              detail-type:
                - 'Object Created'
              detail:
                bucket:
                  name:
                    - !Ref S3Media
                    - !Ref S3ProtectedMedia
                object:
                  key:
                    - prefix: media
                    - prefix: AWSDynamoDB
            DeadLetterConfig:
              Arn: !GetAtt EventsDlq.Arn
            RetryPolicy:
              MaximumEventAgeInSeconds: 900
              MaximumRetryAttempts: 3
      DeadLetterQueue:
        TargetArn: !GetAtt LambdaDlq.Arn
        Type: SQS
      EventInvokeConfig:
        DestinationConfig:
          OnFailure:
            Type: SQS
            Destination: !GetAtt LambdaDlq.Arn
        MaximumEventAgeInSeconds: 900
        MaximumRetryAttempts: 2
    Metadata:
      BuildMethod: makefile

  CreatePdfFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-CreatePdfFunction'
      CodeUri: functions/create-pdf/
      Handler: index.handler
      Description: 'create pdf'
      Timeout: 6
      MemorySize: 512
      Environment:
        Variables:
          MEDIA_BUCKET: !Ref S3Media
          PROTECTED_MEDIA_BUCKET: !Ref S3ProtectedMedia
          STACK: !Ref Stack
      Policies:
        - Version: 2012-10-17
          Statement:
            - Sid: S3
              Effect: Allow
              Action:
                - s3:PutObject
                - s3:PutObjectTagging
                - s3:GetObject
              Resource:
                - !Sub 'arn:${AWS::Partition}:s3:::${S3ProtectedMedia}/pdf/*'
                - !Sub 'arn:${AWS::Partition}:s3:::${S3ProtectedMedia}/*'
        - Version: 2012-10-17
          Statement:
            - Sid: CloudWatchLogGroup
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !GetAtt CloudWatchLogGroup.Arn
              Effect: Allow
      LoggingConfig:
        LogGroup: !Ref CloudWatchLogGroup
    Metadata:
      BuildMethod: makefile

  UploadProgressFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-UploadProgressFunction'
      CodeUri: functions/upload-progress/
      Handler: index.handler
      Description: 's3 upload progress by key'
      Timeout: 6
      MemorySize: 128
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref DynamoDBStackTableName
      Policies:
        - Version: 2012-10-17
          Statement:
            - Sid: DynamoDB
              Effect: Allow
              Action:
                - 'dynamodb:Query'
              Condition:
                ForAllValues:StringLike:
                  dynamodb:LeadingKeys:
                    - 'upload#*'
              Resource:
                - !Sub 'arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBStackTableName}'
        - Version: 2012-10-17
          Statement:
            - Sid: CloudWatchLogGroup
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !GetAtt CloudWatchLogGroup.Arn
              Effect: Allow
      LoggingConfig:
        LogGroup: !Ref CloudWatchLogGroup
    Metadata:
      BuildMethod: makefile

  DynamoDBS3ExportFunction:
    Type: AWS::Serverless::Function
    Condition: IsDynamoDBPointInTimeDailyS3ExportsEnabled
    Properties:
      CodeUri: functions/dynamodb-s3-export/
      Handler: index.handler
      Description: 'export dynamodb tables to s3'
      Timeout: 6
      MemorySize: 128
      Environment:
        Variables:
          DYNAMODB_ARN_PREFIX: !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/
          DYNAMODB_STACK_TABLE: !Ref DynamoDBStackTableName
          DYNAMODB_STACK_AUDIT_TABLE: !Ref DynamoDBStackAuditTableName
          S3_BUCKET: !Ref S3ProtectedMedia
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt LambdaDlq.QueueName
        - Version: 2012-10-17
          Statement:
            - Sid: S3
              Effect: Allow
              Action:
                - s3:PutObject
              Resource:
                - !Sub 'arn:${AWS::Partition}:s3:::${S3ProtectedMedia}/AWSDynamoDB/*'
        - Version: 2012-10-17
          Statement:
            - Sid: CloudWatchLogGroup
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !GetAtt CloudWatchLogGroup.Arn
              Effect: Allow
        - Version: 2012-10-17
          Statement:
            - Sid: DynamoDB
              Effect: Allow
              Action:
                - dynamodb:ExportTableToPointInTime
              Resource:
                - !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBStackTableName}
                - !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBStackAuditTableName}
      LoggingConfig:
        LogGroup: !Ref CloudWatchLogGroup
      Events:
        Trigger:
          Type: Schedule
          Properties:
            Enabled: true
            # daily, mon-fri at 00:00
            Schedule: 'cron(0 0 ? * 2-6 *)'
            DeadLetterConfig:
              Arn: !GetAtt EventsDlq.Arn
            RetryPolicy:
              MaximumEventAgeInSeconds: 900
              MaximumRetryAttempts: 3
      DeadLetterQueue:
        TargetArn: !GetAtt LambdaDlq.Arn
        Type: SQS
      EventInvokeConfig:
        DestinationConfig:
          OnFailure:
            Type: SQS
            Destination: !GetAtt LambdaDlq.Arn
        MaximumEventAgeInSeconds: 900
        MaximumRetryAttempts: 0
    Metadata:
      BuildMethod: makefile

  DynamoDBS3ExportAssertionFunction:
    Type: AWS::Serverless::Function
    Condition: IsDynamoDBPointInTimeDailyS3ExportsEnabled
    Properties:
      CodeUri: functions/dynamodb-s3-export-assertion/
      Handler: index.handler
      Description: 'export dynamodb s3 export assertion'
      Timeout: 6
      MemorySize: 128
      Environment:
        Variables:
          DYNAMODB_ARN_PREFIX: !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/
          DYNAMODB_STACK_TABLE: !Ref DynamoDBStackTableName
          DYNAMODB_STACK_AUDIT_TABLE: !Ref DynamoDBStackAuditTableName
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt LambdaDlq.QueueName
        - Version: 2012-10-17
          Statement:
            - Sid: CloudWatchLogGroup
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !GetAtt CloudWatchLogGroup.Arn
              Effect: Allow
        - Version: 2012-10-17
          Statement:
            - Sid: DynamoDBListExports
              Effect: Allow
              Action:
                - dynamodb:ListExports
              Resource: '*'
            - Sid: DynamoDBReadExports
              Effect: Allow
              Action:
                - dynamodb:DescribeExport
              Resource:
                - !Sub 'arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBStackTableName}/export/*'
                - !Sub 'arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBStackAuditTableName}/export/*'
      LoggingConfig:
        LogGroup: !Ref CloudWatchLogGroup
      Events:
        Trigger:
          Type: Schedule
          Properties:
            Enabled: true
            # daily, mon-fri at 02:00
            Schedule: 'cron(0 2 ? * 2-6 *)'
            DeadLetterConfig:
              Arn: !GetAtt EventsDlq.Arn
            RetryPolicy:
              MaximumEventAgeInSeconds: 900
              MaximumRetryAttempts: 3
      DeadLetterQueue:
        TargetArn: !GetAtt LambdaDlq.Arn
        Type: SQS
      EventInvokeConfig:
        DestinationConfig:
          OnFailure:
            Type: SQS
            Destination: !GetAtt LambdaDlq.Arn
        MaximumEventAgeInSeconds: 900
        MaximumRetryAttempts: 0
    Metadata:
      BuildMethod: makefile

Outputs:
  S3StaticBucket:
    Description: S3 Bucket for static content
    Value: !Ref S3Static
    Export:
      Name: !Sub '${AWS::StackName}S3StaticBucket'
  S3MediaBucket:
    Description: S3 Bucket for media content
    Value: !Ref S3Media
    Export:
      Name: !Sub '${AWS::StackName}S3MediaBucket'
  S3ProtectedMediaBucket:
    Description: S3 Bucket for protected media content
    Value: !Ref S3ProtectedMedia
    Export:
      Name: !Sub '${AWS::StackName}S3ProtectedMediaBucket'
  S3ProtectedMediaLogsBucket:
    Description: S3 Bucket for protected media content access logs
    Value: !Ref S3ProtectedMediaLogs
    Export:
      Name: !Sub '${AWS::StackName}S3ProtectedMediaLogsBucket'
