httpAuth:
  handler: functions/request-auth/index.httpAuth
  description: 'httpapi authorizer'
  runtime: nodejs20.x
  architecture: arm64
  timeout: 6
  memorySize: 128
  environment:
    SSM_API_JWT_SECRET: /${file(../settings.js):stackName}/${opt:stage}/API_JWT_SECRET
    DYNAMODB_TABLE: ${file(../settings.js):dynamodbStackTable}
  iamRoleStatementsInherit: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - 'ssm:GetParameter'
      Resource:
        - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${file(../settings.js):stackName}/${opt:stage}/API_JWT_SECRET'
    - Effect: Allow
      Action:
        - 'dynamodb:GetItem'
      Resource:
        - !Sub 'arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${file(../settings.js):dynamodbStackTable}'
      Condition:
        ForAllValues:StringLike:
          dynamodb:LeadingKeys:
            - 'session#*'
    - Effect: Allow
      Action:
        - apigateway:GET
      Resource:
        - !Sub arn:${AWS::Partition}:apigateway:*::/restapis*
        - !Sub arn:${AWS::Partition}:apigateway:*::/apikeys*
        - !Sub arn:${AWS::Partition}:apigateway:*::/usageplans*
  package:
    individually: true
    patterns: ${file(../settings.js):nodeFunctionPatterns.functions/request-auth/**}
httpAnonymousAuth:
  handler: functions/request-auth/index.httpAnonymousAuth
  description: 'httpapi anonymous authorizer'
  runtime: nodejs20.x
  architecture: arm64
  timeout: 6
  memorySize: 128
  environment:
    SSM_API_JWT_SECRET: /${file(../settings.js):stackName}/${opt:stage}/API_JWT_SECRET
    DYNAMODB_TABLE: ${file(../settings.js):dynamodbStackTable}
  iamRoleStatementsInherit: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - 'ssm:GetParameter'
      Resource:
        - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${file(../settings.js):stackName}/${opt:stage}/API_JWT_SECRET'
    - Effect: Allow
      Action:
        - 'dynamodb:GetItem'
      Resource:
        - !Sub 'arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${file(../settings.js):dynamodbStackTable}'
      Condition:
        ForAllValues:StringLike:
          dynamodb:LeadingKeys:
            - 'session#*'
    - Effect: Allow
      Action:
        - apigateway:GET
      Resource:
        - !Sub arn:${AWS::Partition}:apigateway:*::/restapis*
        - !Sub arn:${AWS::Partition}:apigateway:*::/apikeys*
        - !Sub arn:${AWS::Partition}:apigateway:*::/usageplans*
  package:
    individually: true
    patterns: ${file(../settings.js):nodeFunctionPatterns.functions/request-auth/**}
webSocketAuth:
  handler: functions/request-auth/index.webSocketAuth
  description: 'websocket authorizer'
  runtime: nodejs20.x
  architecture: arm64
  timeout: 6
  memorySize: 128
  environment:
    SSM_API_JWT_SECRET: /${file(../settings.js):stackName}/${opt:stage}/API_JWT_SECRET
    DYNAMODB_TABLE: ${file(../settings.js):dynamodbStackTable}
  iamRoleStatementsInherit: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - 'ssm:GetParameter'
      Resource:
        - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${file(../settings.js):stackName}/${opt:stage}/API_JWT_SECRET'
    - Effect: Allow
      Action:
        - 'dynamodb:GetItem'
      Resource:
        - !Sub 'arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${file(../settings.js):dynamodbStackTable}'
      Condition:
        ForAllValues:StringLike:
          dynamodb:LeadingKeys:
            - 'session#*'
  package:
    individually: true
    patterns: ${file(../settings.js):nodeFunctionPatterns.functions/request-auth/**}
webSocketAnonymousAuth:
  handler: functions/request-auth/index.webSocketAnonymousAuth
  description: 'websocket anonymous authorizer'
  runtime: nodejs20.x
  architecture: arm64
  timeout: 6
  memorySize: 128
  environment:
    SSM_API_JWT_SECRET: /${file(../settings.js):stackName}/${opt:stage}/API_JWT_SECRET
    DYNAMODB_TABLE: ${file(../settings.js):dynamodbStackTable}
  iamRoleStatementsInherit: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - 'ssm:GetParameter'
      Resource:
        - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${file(../settings.js):stackName}/${opt:stage}/API_JWT_SECRET'
    - Effect: Allow
      Action:
        - 'dynamodb:GetItem'
      Resource:
        - !Sub 'arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${file(../settings.js):dynamodbStackTable}'
      Condition:
        ForAllValues:StringLike:
          dynamodb:LeadingKeys:
            - 'session#*'
  package:
    individually: true
    patterns: ${file(../settings.js):nodeFunctionPatterns.functions/request-auth/**}
apiJwtSecretChanged:
  handler: functions/api-jwt-secret-changed/index.handler
  description: 'propagate jwt secret to cloudfront functions and invalidate authorizer cache'
  runtime: nodejs20.x
  architecture: arm64
  timeout: 10
  memorySize: 128
  environment:
    CLOUDFRONT_VIEWER_REQUEST_ARN: !GetAtt cloudfrontViewerRequest.FunctionARN
    STACK_NAME: ${file(../settings.js):stackName}
    STAGE_ROOT: ${file(../settings.js):stageRoot}
    STAGE: ${opt:stage}
    HTTP_API_ID: !Ref apigwHttp
    REST_API_ID: !Ref apigwRest
  iamRoleStatementsInherit: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - 'ssm:GetParameter'
      Resource:
        - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${file(../settings.js):stackName}/${opt:stage}/API_JWT_SECRET'
    - Effect: Allow
      Action:
        - 'apigateway:DELETE'
      Resource:
        - !Join
          - ''
          - - !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}::/apis/'
            - !Ref apigwHttp
            - '/stages/'
            - '%24default'
            - '/cache/authorizers'
        - !Join
          - ''
          - - !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}::/restapis/'
            - !Ref apigwRest
            - '/stages/'
            - ${file(../settings.js):stage}
            - '/cache/authorizers'
    - Effect: Allow
      Action:
        - 'cloudfront:DescribeFunction'
        - 'cloudfront:UpdateFunction'
        - 'cloudfront:PublishFunction'
      Resource:
        - !GetAtt cloudfrontViewerRequest.FunctionARN
    - Effect: Allow
      Action:
        - 'sqs:SendMessage'
      Resource:
        - !GetAtt lambdaDlq.Arn
  events:
    - eventBridge:
        pattern:
          source:
            - 'aws.ssm'
          detail-type:
            - 'Parameter Store Change'
          detail:
            name:
              - /${file(../settings.js):stackName}/${opt:stage}/API_JWT_SECRET
            operation:
              - Create
              - Update
        deadLetterQueueArn: !GetAtt eventsDlq.Arn
        retryPolicy:
          maximumEventAge: 900
          maximumRetryAttempts: 3
  maximumEventAge: 900
  maximumRetryAttempts: 2
  destinations:
    onFailure:
      arn: !GetAtt lambdaDlq.Arn
      type: sqs

  package:
    individually: true
    patterns: ${file(../settings.js):nodeFunctionPatterns.functions/api-jwt-secret-changed/**|resources/**}
s3-replicate:
  enabled: '${file(../settings.json):accountPerStage} && "${opt:stage, "local"}" === "prod"'
  handler: functions/s3-replicate/index.handler
  description: 'replicate cloudfront logs'
  runtime: nodejs20.x
  architecture: arm64
  timeout: 40
  memorySize: 1024
  events:
    - eventBridge:
        pattern:
          source:
            - 'aws.s3'
          detail-type:
            - 'Object Created'
          detail:
            bucket:
              name:
                - !Ref s3CloudFrontLogs
        deadLetterQueueArn: !GetAtt eventsDlq.Arn
        retryPolicy:
          maximumEventAge: 900
          maximumRetryAttempts: 3
  maximumEventAge: 900
  maximumRetryAttempts: 2
  destinations:
    onFailure:
      arn: !GetAtt lambdaDlq.Arn
      type: sqs
  environment:
    S3_BACKUP_BUCKET: ${file(../settings.js):s3Backup}
    S3_BACKUP_BUCKET_REGION: ${file(../settings.json):regions.backup,''}
  iamRoleStatementsInherit: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:GetObjectTagging
      Resource:
        - !Join
          - ''
          - - !GetAtt s3CloudFrontLogs.Arn
            - '/*'
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:PutObjectACL
        - s3:PutObjectTagging
      Resource:
        - !Sub 'arn:${AWS::Partition}:s3:::${file(../settings.js):s3Backup}/*'
    - Effect: Allow
      Action:
        - 'sqs:SendMessage'
      Resource:
        - !GetAtt lambdaDlq.Arn
  package:
    individually: true
    patterns: ${file(../settings.js):nodeFunctionPatterns.functions/s3-replicate/**}
sentry:
  handler: functions/sentry/index.handler
  enabled: '${file(../settings.js):awsAccounts.${file(../aws-account.js):accountId}.wafEnabled}'
  description: 'send waf cloudwatch logs to sentry'
  runtime: nodejs20.x
  architecture: arm64
  timeout: 6
  memorySize: 128
  events: ${file(../waf-log-group-events.js)}
  maximumEventAge: 300
  maximumRetryAttempts: 0
  environment:
    SENTRY_DSN: ${file(../settings.js):sentryDSN}
    SENTRY_ENVIRONMENT: ${file(../settings.js):sentryEnvironment}
    SENTRY_TUNNEL: ${file(../settings.js):stageRootUrl}/api/rest/sentry-tunnel
    STAGE: ${opt:stage}
  iamRoleStatementsInherit: true
  iamRoleStatements: []
  package:
    individually: true
    patterns: ${file(../settings.js):nodeFunctionPatterns.functions/sentry/**}
