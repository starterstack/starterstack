AWSTemplateFormatVersion: 2010-09-09
Transform:
  - AWS::LanguageExtensions
  - AWS::Serverless-2016-10-31

Description: CDN

Globals:
  Function:
    Tracing: Active
    Architectures:
      - arm64
    Runtime: nodejs20.x
    PropagateTags: true
    Environment:
      Variables:
        GIT_COMMIT: !Ref GITCommit

Parameters:
  Stack:
    Type: String
  Stage:
    Type: String
  StageRoot:
    Type: String
  S3BackupBucket:
    Type: String
  BackupRegion:
    Type: String
  StageRootUrl:
    Type: String
  AccountPerStage:
    Type: String
  SentryDSN:
    Type: String
  SentryEnvironment:
    Type: String
  PriceClass:
    Type: String
  CaptureUserLanguageAndDeviceValue:
    Type: String
  CloudFrontWafACL:
    Type: String
  AcmCertificateArn:
    Type: String
  LogRetentionInDays:
    Type: String
  GITCommit:
    Type: String
  DynamoDBStackTableName:
    Type: String
  ZoneId:
    Type: String
  ApiGatewayRestLogFormat:
    Type: String
  CloudFrontViewerRequestCode:
    Type: String
  CloudFrontViewerResponseCode:
    Type: String
  SNSAlarmTopic:
    Type: String

Metadata:
  expand:
    plugins:
      - '../git.mjs'
      - '../hash.mjs'
      - '../stack-stage-config.mjs'
      - '@starterstack/sam-expand/plugins/parameter-overrides'
      - '@starterstack/sam-expand/plugins/run-script-hooks'
      - './apigateway-deployment.mjs'
      - './sentry-events.mjs'
      - '../purge-lambda-versions.mjs'
      - '../generate-cloudwatch-alarms.mjs'
    config:
      stackStageConfig:
        suffixStage: true
        addMappings: true
      parameterOverrides:
        - location: ../stack-stage-config.mjs
          overrides:
            - name: StageRoot
              exportName: stageOrStackRoot
            - name: StageRootUrl
              exportName: stageRootUrl
            - name: AccountPerStage
              exportName: accountPerStage
            - name: S3BackupBucket
              exportName: ssmS3LogBucket
            - name: BackupRegion
              exportName: backupRegion
            - name: SentryDSN
              exportName: sentryDSN
            - name: SentryEnvironment
              exportName: sentryEnvironment
            - name: AcmCertificateArn
              exportName: acmCertificateArn
            - name: CloudFrontWafACL
              exportName: cloudFrontWafACL
              defaultValue: 'CloudFrontWafACL'
            - name: LogRetentionInDays
              exportName: logRetentionInDays
            - name: ZoneId
              exportName: zoneId
            - name: SNSAlarmTopic
              exportName: snsAlarmTopic
            - name: ApiGatewayRestLogFormat
              exportName: apiGatewayRestLogFormat
            - name: DynamoDBStackTableName
              exportName: dynamodbStackTableName
        - location: ../settings.json
          overrides:
            - name: PriceClass
              exportName: priceClass
            - name: CaptureUserLanguageAndDeviceValue
              exportName: captureUserLanguageAndDevice
        - location: ./cloudfront-functions.mjs
          overrides:
            - name: CloudFrontViewerRequestCode
              exportName: viewerRequestCode
            - name: CloudFrontViewerResponseCode
              exportName: viewerResponseCode
        - location: ../git.mjs
          overrides:
            - name: GITCommit
              exportName: commit
      purgeLambdaVersions:
        keep: 3
      script:
        hooks:
          pre:build:
            - command: npm
              args:
                - value: --prefix
                - value: ./unit/test
                - value: test
          pre:delete:
            - command: ../empty-s3-bucket.sh
              args:
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: s3Media
            - command: ../empty-s3-bucket.sh
              args:
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: s3ProtectedMedia
            - command: ../empty-s3-bucket.sh
              args:
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: s3Static
            - command: ../empty-s3-bucket.sh
              args:
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: s3CloudFrontLogs
            - command: ../empty-s3-bucket.sh
              args:
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: s3ProtectedMediaLogs
          pre:deploy:
            - command: ./scripts/patch-api-gateway-account.sh
              args:
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: region
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: apiGatewayCloudwatchRole
          post:deploy:
            - command: ../tag-cloudwatch-alarms.sh
              args:
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: stackName
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: region
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: stage
            - command: ../tag-eventbus-rules.sh
              args:
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: stackName
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: region
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: stage
            - command: ./scripts/upsert-cloudfront-keyvalue-store.sh
              args:
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: stackName
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: region
      alarms:
        snsTopicRef: SNSAlarmTopic

Conditions:
  ShouldReplicate: !And
    - !Equals
      - !Ref AccountPerStage
      - 'true'
    - !Equals
      - !Ref Stage
      - 'prod'
  IsWafEnabled: !Equals
    - !FindInMap
      - AWSAccounts
      - !Ref 'AWS::AccountId'
      - wafEnabled
    - true
  CaptureUserLanguageAndDevice: !Equals
    - !Ref CaptureUserLanguageAndDeviceValue
    - true

Resources:
  CloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}
      RetentionInDays: !Ref LogRetentionInDays
      Tags:
        - Key: 'Name'
          Value: !Sub '${AWS::StackName} lambda logs'
        - Key: 'ManagedBy'
          Value: !Ref Stack
  EventsDlq:
    Type: AWS::SQS::Queue
    Properties:
      SqsManagedSseEnabled: true
      Tags:
        - Key: 'Name'
          Value: !Sub '${AWS::StackName}-events-dlq'
        - Key: 'ManagedBy'
          Value: !Ref Stack
  EventsDlqPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - 'sqs:SendMessage'
            Principal:
              Service: 'events.amazonaws.com'
            Resource: !GetAtt EventsDlq.Arn
            Condition:
              ArnEquals:
                'aws:SourceArn': !Sub 'arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/${AWS::StackName}*'
          - Effect: Allow
            Action:
              - 'sqs:SendMessage'
            Principal:
              Service: 'sns.amazonaws.com'
            Resource: !GetAtt EventsDlq.Arn
            Condition:
              ArnEquals:
                'aws:SourceArn': !Sub 'arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:${AWS::StackName}*'
      Queues:
        - !Ref EventsDlq
  LambdaDlq:
    Type: AWS::SQS::Queue
    Properties:
      SqsManagedSseEnabled: true
      Tags:
        - Key: 'Name'
          Value: !Sub ${AWS::StackName}-lambda-dlq
        - Key: 'ManagedBy'
          Value: !Ref Stack

  S3CloudFrontLogs:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      LifecycleConfiguration:
        Rules:
          - Id: TransitionToIntelligentTiering
            Status: Enabled
            Transitions:
              - StorageClass: INTELLIGENT_TIERING
                TransitionInDays: 0
          - Id: ExpirationInDays
            Status: Enabled
            ExpirationInDays: 7
          - Id: ExpireNonCurrent
            ExpiredObjectDeleteMarker: true
            Status: Enabled
          - Id: NonCurrentRetention
            Status: Enabled
            NoncurrentVersionExpiration:
              NoncurrentDays: 1
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
      VersioningConfiguration:
        Status: Enabled
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
      Tags:
        - Key: 'Name'
          Value: !Sub ${AWS::StackName}-s3-cloudfront-logs
        - Key: 'ManagedBy'
          Value: !Ref Stack

  S3CloudFrontLogsPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3CloudFrontLogs
      PolicyDocument:
        Version: '2012-10-17'
        Id: PolicyForCloudFrontLogs
        Statement:
          - Effect: Deny
            Action: 's3:*'
            Resource:
              - !Sub '${S3CloudFrontLogs.Arn}'
              - !Sub '${S3CloudFrontLogs.Arn}/*'
            Principal: '*'
            Condition:
              Bool:
                'aws:SecureTransport': false

  S3Static:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: TransitionToIntelligentTiering
            Status: Enabled
            Transitions:
              - StorageClass: INTELLIGENT_TIERING
                TransitionInDays: 0
          - Id: NonCurrentRetention
            Status: Enabled
            NoncurrentVersionExpiration:
              NewerNoncurrentVersions: 3
              NoncurrentDays: 7
          - Id: DeleteNonCurrent
            ExpiredObjectDeleteMarker: true
            Status: Enabled
      AccelerateConfiguration:
        AccelerationStatus: Enabled
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: 'Name'
          Value: !Sub ${AWS::StackName}-static
        - Key: 'ManagedBy'
          Value: !Ref Stack

  S3StaticPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Static
      PolicyDocument:
        Version: '2012-10-17'
        Id: PolicyForCloudFrontPrivateContent
        Statement:
          - Effect: Deny
            Action: 's3:*'
            Resource:
              - !Sub '${S3Static.Arn}'
              - !Sub '${S3Static.Arn}/*'
            Principal: '*'
            Condition:
              Bool:
                'aws:SecureTransport': false
          - Effect: Allow
            Action:
              - 's3:GetObject'
            Resource:
              - !Sub '${S3Static.Arn}/*'
            Condition:
              Bool:
                'aws:SecureTransport': true
              StringEquals:
                'AWS:SourceArn': !Sub 'arn:${AWS::Partition}:cloudfront::${AWS::AccountId}:distribution/${CloudFront}'
            Principal:
              Service: 'cloudfront.amazonaws.com'

  S3Media:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: TransitionToIntelligentTiering
            Status: Enabled
            Prefix: media
            Transitions:
              - StorageClass: INTELLIGENT_TIERING
                TransitionInDays: 0
          - Id: ExpireTemp
            Status: Enabled
            ExpirationInDays: 1
            Prefix: temp
          - Id: NonCurrentRetentionMedia
            Status: Enabled
            Prefix: media
            NoncurrentVersionExpiration:
              NewerNoncurrentVersions: 3
              NoncurrentDays: 7
          - Id: NonCurrentRetentionTemp
            Status: Enabled
            Prefix: temp
            NoncurrentVersionExpiration:
              NoncurrentDays: 1
          - Id: DeleteNonCurrent
            ExpiredObjectDeleteMarker: true
            Status: Enabled
      AccelerateConfiguration:
        AccelerationStatus: Enabled
      CorsConfiguration:
        CorsRules:
          - AllowedMethods:
              - POST
            AllowedOrigins:
              - !Ref StageRootUrl
            MaxAge: 600
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
      VersioningConfiguration:
        Status: Enabled
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
      MetricsConfigurations:
        - Id: !Sub ${AWS::StackName}-media-temp-filter
          Prefix: temp
      Tags:
        - Key: 'Name'
          Value: !Sub ${AWS::StackName}-media
        - Key: 'ManagedBy'
          Value: !Ref Stack

  S3MediaPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Media
      PolicyDocument:
        Version: '2012-10-17'
        Id: PolicyForCloudFrontPrivateContent
        Statement:
          - Effect: Deny
            Action: 's3:*'
            Resource:
              - !Sub '${S3Media.Arn}'
              - !Sub '${S3Media.Arn}/*'
            Principal: '*'
            Condition:
              Bool:
                'aws:SecureTransport': false
          - Effect: Allow
            Action:
              - 's3:GetObject'
            Resource: !Sub '${S3Media.Arn}/*'
            Condition:
              Bool:
                'aws:SecureTransport': true
              StringEquals:
                'AWS:SourceArn': !Sub 'arn:${AWS::Partition}:cloudfront::${AWS::AccountId}:distribution/${CloudFront}'
            Principal:
              Service: 'cloudfront.amazonaws.com'

  S3ProtectedMedia:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: TransitionToIntelligentTiering
            Status: Enabled
            Prefix: media
            Transitions:
              - StorageClass: INTELLIGENT_TIERING
                TransitionInDays: 0
          - Id: ExpireTemp
            Status: Enabled
            ExpirationInDays: 1
            Prefix: temp
          - Id: ExpirePdf
            Status: Enabled
            ExpirationInDays: 1
            Prefix: pdf
          - Id: ExpireDynamoDBBackups
            Status: Enabled
            ExpirationInDays: 31
            Prefix: AWSDynamoDB
          - Id: NonCurrentRetentionMedia
            Status: Enabled
            Prefix: media
            NoncurrentVersionExpiration:
              NewerNoncurrentVersions: 3
              NoncurrentDays: 7
          - Id: NonCurrentRetentionTemp
            Status: Enabled
            Prefix: temp
            NoncurrentVersionExpiration:
              NoncurrentDays: 1
          - Id: NonCurrentRetentionPdf
            Status: Enabled
            Prefix: pdf
            NoncurrentVersionExpiration:
              NoncurrentDays: 1
          - Id: NonCurrentRetentionBulk
            Status: Enabled
            Prefix: bulk-invite
            NoncurrentVersionExpiration:
              NoncurrentDays: 1
          - Id: NonCurrentRetentionDBBackups
            Status: Enabled
            Prefix: AWSDynamoDB
            NoncurrentVersionExpiration:
              NoncurrentDays: 1
          - Id: AbortIncompleteMultipartUpload
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
            Prefix: temp
          - Id: DeleteNonCurrent
            ExpiredObjectDeleteMarker: true
            Status: Enabled
      AccelerateConfiguration:
        AccelerationStatus: Enabled
      CorsConfiguration:
        CorsRules:
          - AllowedMethods:
              - POST
            AllowedOrigins:
              - !Ref StageRootUrl
            MaxAge: 600
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
      VersioningConfiguration:
        Status: Enabled
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
      MetricsConfigurations:
        - Id: !Sub ${AWS::StackName}-protected-media-temp-filter
          Prefix: temp
      LoggingConfiguration:
        DestinationBucketName: !Ref S3ProtectedMediaLogs
      Tags:
        - Key: 'Name'
          Value: !Sub ${AWS::StackName}-protected-media
        - Key: 'ManagedBy'
          Value: !Ref Stack

  S3ProtectedMediaPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3ProtectedMedia
      PolicyDocument:
        Version: '2012-10-17'
        Id: PolicyForCloudFrontPrivateContent
        Statement:
          - Effect: Deny
            Action: 's3:*'
            Resource:
              - !Sub '${S3ProtectedMedia.Arn}'
              - !Sub '${S3ProtectedMedia.Arn}/*'
            Principal: '*'
            Condition:
              Bool:
                'aws:SecureTransport': false
          - Effect: Allow
            Action:
              - 's3:GetObject'
            Resource: !Sub '${S3ProtectedMedia.Arn}/*'
            Condition:
              Bool:
                'aws:SecureTransport': true
              StringEquals:
                'AWS:SourceArn': !Sub 'arn:${AWS::Partition}:cloudfront::${AWS::AccountId}:distribution/${CloudFront}'
            Principal:
              Service: 'cloudfront.amazonaws.com'

  S3ProtectedMediaLogs:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: TransitionToIntelligentTiering
            Status: Enabled
            Transitions:
              - StorageClass: INTELLIGENT_TIERING
                TransitionInDays: 0
          - Id: ExpireLogs
            Status: Enabled
            ExpirationInDays: 7
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
      Tags:
        - Key: 'Name'
          Value: !Sub ${AWS::StackName}-protected-media-logs
        - Key: 'ManagedBy'
          Value: !Ref Stack

  S3ProtectedMediaLogsPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3ProtectedMediaLogs
      PolicyDocument:
        Version: '2012-10-17'
        Id: PolicyForAccessLoggingForProtectedMedia
        Statement:
          - Effect: Deny
            Action: 's3:*'
            Resource:
              - !Sub '${S3ProtectedMediaLogs.Arn}'
              - !Sub '${S3ProtectedMediaLogs.Arn}/*'
            Principal: '*'
            Condition:
              Bool:
                'aws:SecureTransport': false
          - Effect: Allow
            Action:
              - 's3:PutObject'
              - 's3:PutObjectACL'
            Resource:
              - !Sub '${S3ProtectedMediaLogs.Arn}/*'
            Condition:
              Bool:
                'aws:SecureTransport': true
              ArnLike:
                'aws:SourceArn': !GetAtt S3ProtectedMedia.Arn
              StringEquals:
                'aws:SourceAccount': !Sub '${AWS::AccountId}'
            Principal:
              Service: 'logging.s3.amazonaws.com'

  CloudFrontResponseHeaderPolicy:
    Type: AWS::CloudFront::ResponseHeadersPolicy
    Properties:
      ResponseHeadersPolicyConfig:
        Comment: !Sub 'Created by SAM by ${AWS::StackName}'
        Name: !Sub '${AWS::StackName}-default-headers-policy'
        CustomHeadersConfig:
          Items:
            - Header: X-Dns-Prefetch-Control
              Value: off
              Override: false
            - Header: X-Download-Options
              Value: noopen
              Override: false
            - Header: X-Permitted-Cross-Domain-Policies
              Value: none
              Override: false
            - Header: Cross-Origin-Opener-Policy
              Value: same-origin
              Override: false
            - Header: Cross-Origin-Resource-Policy
              Value: same-origin
              Override: false
            - Header: Server
              Value: ''
              Override: true
        SecurityHeadersConfig:
          ContentSecurityPolicy:
            ContentSecurityPolicy: >-
              base-uri 'self';
              object-src 'none';
              script-src 'self';
              style-src 'unsafe-inline' 'self' 'unsafe-eval';
              upgrade-insecure-requests;
              connect-src 'self';
              img-src 'self';
              manifest-src 'self';
              font-src 'self';
              media-src 'self';
              worker-src 'self';
              form-action 'self';
              frame-ancestors 'self';
              child-src 'none';
              default-src 'none'
            Override: false
          ContentTypeOptions:
            Override: false
          FrameOptions:
            FrameOption: DENY
            Override: false
          ReferrerPolicy:
            ReferrerPolicy: no-referrer
            Override: false
          StrictTransportSecurity:
            AccessControlMaxAgeSec: 15768000
            IncludeSubdomains: true
            Preload: true
            Override: false
          XSSProtection:
            ModeBlock: true
            Protection: true
            Override: false
        ServerTimingHeadersConfig:
          Enabled: true
          SamplingRate: !FindInMap
            - AWSAccounts
            - !Ref 'AWS::AccountId'
            - cloudfrontServerTiming
            - DefaultValue: 0

  CloudFrontKeyValueStore:
    Type: AWS::CloudFront::KeyValueStore
    Properties:
      Comment: !Sub '${AWS::StackName} key value store'
      Name: !Sub '${Stack}-${Stage}-Store'

  CloudFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        IPV6Enabled: true
        HttpVersion: http2and3
        Aliases:
          - !Ref StageRoot
        Comment: !Sub 'Created by SAM by ${AWS::StackName}'
        PriceClass: !Ref PriceClass
        WebACLId: !If
          - IsWafEnabled
          - !Ref CloudFrontWafACL
          - !Ref AWS::NoValue
        Origins:
          - Id: S3StaticOrigin
            DomainName: !GetAtt S3Static.RegionalDomainName
            OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
            S3OriginConfig: {}
            OriginShield:
              Enabled: true
              OriginShieldRegion: !Sub '${AWS::Region}'
          - Id: ApiGatewayRestOrigin
            DomainName: !Sub '${ApiGatewayRest}.execute-api.${AWS::Region}.amazonaws.com'
            CustomOriginConfig:
              OriginProtocolPolicy: match-viewer
            OriginShield:
              Enabled: true
              OriginShieldRegion: !Sub '${AWS::Region}'
          - Id: S3ProtectedMediaOrigin
            DomainName: !GetAtt S3ProtectedMedia.RegionalDomainName
            OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
            S3OriginConfig: {}
            OriginShield:
              Enabled: true
              OriginShieldRegion: !Sub '${AWS::Region}'
          - Id: S3MediaOrigin
            DomainName: !GetAtt S3Media.RegionalDomainName
            OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
            S3OriginConfig: {}
            OriginShield:
              Enabled: true
              OriginShieldRegion: !Sub '${AWS::Region}'
          - Id: ApiGatewayWebSocketOrigin
            DomainName:
              !Select [
                1,
                !Split ['//', !GetAtt ApiGatewayWebSocket.ApiEndpoint]
              ]
            CustomOriginConfig:
              OriginProtocolPolicy: match-viewer
        DefaultCacheBehavior:
          AllowedMethods: ['GET', 'HEAD']
          CachedMethods: ['GET', 'HEAD']
          CachePolicyId: !Ref StaticCachePolicy
          OriginRequestPolicyId: !Ref BasicOriginRequestPolicy
          TargetOriginId: ApiGatewayRestOrigin
          ViewerProtocolPolicy: redirect-to-https
          ResponseHeadersPolicyId: !Ref CloudFrontResponseHeaderPolicy
          SmoothStreaming: false
          Compress: true
          FunctionAssociations:
            - EventType: viewer-response
              FunctionARN: !GetAtt CloudFrontViewerResponse.FunctionARN
            - EventType: viewer-request
              FunctionARN: !GetAtt CloudFrontViewerRequest.FunctionARN
        CacheBehaviors:
          - AllowedMethods: ['GET', 'HEAD']
            CachedMethods: ['GET', 'HEAD']
            CachePolicyId: !Ref StaticCachePolicy
            OriginRequestPolicyId: !Ref BasicOriginRequestPolicy
            TargetOriginId: S3ProtectedMediaOrigin
            ViewerProtocolPolicy: redirect-to-https
            ResponseHeadersPolicyId: !Ref CloudFrontResponseHeaderPolicy
            SmoothStreaming: false
            Compress: true
            FunctionAssociations:
              - EventType: viewer-response
                FunctionARN: !GetAtt CloudFrontViewerResponse.FunctionARN
              - EventType: viewer-request
                FunctionARN: !GetAtt CloudFrontViewerRequest.FunctionARN
            PathPattern: '/media/~/*'
          - AllowedMethods: ['GET', 'HEAD']
            CachedMethods: ['GET', 'HEAD']
            CachePolicyId: !Ref StaticCachePolicy
            OriginRequestPolicyId: !Ref BasicOriginRequestPolicy
            TargetOriginId: S3MediaOrigin
            ViewerProtocolPolicy: redirect-to-https
            ResponseHeadersPolicyId: !Ref CloudFrontResponseHeaderPolicy
            SmoothStreaming: false
            Compress: true
            FunctionAssociations:
              - EventType: viewer-response
                FunctionARN: !GetAtt CloudFrontViewerResponse.FunctionARN
              - EventType: viewer-request
                FunctionARN: !GetAtt CloudFrontViewerRequest.FunctionARN
            PathPattern: '/media/*'
          - AllowedMethods: ['GET', 'HEAD']
            CachePolicyId: '4135ea2d-6df8-44a3-9df3-4b5a84be39ad' # disabled
            OriginRequestPolicyId: !Ref WebsocketOriginRequestPolicy
            TargetOriginId: ApiGatewayWebSocketOrigin
            ViewerProtocolPolicy: https-only
            ResponseHeadersPolicyId: !Ref CloudFrontResponseHeaderPolicy
            SmoothStreaming: false
            Compress: true
            FunctionAssociations:
              - EventType: viewer-response
                FunctionARN: !GetAtt CloudFrontViewerResponse.FunctionARN
              - EventType: viewer-request
                FunctionARN: !GetAtt CloudFrontViewerRequest.FunctionARN
            PathPattern: '/api/ws*'
          - AllowedMethods:
              ['GET', 'HEAD', 'PUT', 'PATCH', 'POST', 'DELETE', 'OPTIONS']
            CachedMethods: ['GET', 'HEAD']
            CachePolicyId: !Ref QueryCachePolicy
            OriginRequestPolicyId: !Ref BasicOriginRequestPolicy
            TargetOriginId: ApiGatewayRestOrigin
            ViewerProtocolPolicy: redirect-to-https
            ResponseHeadersPolicyId: !Ref CloudFrontResponseHeaderPolicy
            SmoothStreaming: false
            Compress: true
            FunctionAssociations:
              - EventType: viewer-response
                FunctionARN: !GetAtt CloudFrontViewerResponse.FunctionARN
              - EventType: viewer-request
                FunctionARN: !GetAtt CloudFrontViewerRequest.FunctionARN
            PathPattern: '/api/*'
          - AllowedMethods: ['GET', 'HEAD']
            CachedMethods: ['GET', 'HEAD']
            CachePolicyId: !Ref QueryCachePolicy
            OriginRequestPolicyId: !Ref BasicOriginRequestPolicy
            TargetOriginId: S3StaticOrigin
            ViewerProtocolPolicy: redirect-to-https
            ResponseHeadersPolicyId: !Ref CloudFrontResponseHeaderPolicy
            SmoothStreaming: false
            Compress: true
            FunctionAssociations:
              - EventType: viewer-response
                FunctionARN: !GetAtt CloudFrontViewerResponse.FunctionARN
              - EventType: viewer-request
                FunctionARN: !GetAtt CloudFrontViewerRequest.FunctionARN
            PathPattern: '/*.*'
        ViewerCertificate:
          AcmCertificateArn: !Ref AcmCertificateArn
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only
        Logging:
          Bucket: !GetAtt S3CloudFrontLogs.DomainName
      Tags:
        - Key: 'Name'
          Value: !Sub '${AWS::StackName}'
        - Key: 'ManagedBy'
          Value: !Ref Stack

  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub '${AWS::StackName} S3 Origin Access Control'
        Description: !Sub 'S3 OAC Created by SAM by ${AWS::StackName}'
        OriginAccessControlOriginType: 's3'
        SigningBehavior: 'always'
        SigningProtocol: 'sigv4'

  CloudFrontViewerRequest:
    Type: AWS::CloudFront::Function
    Properties:
      Name: !Sub '${AWS::StackName}-viewer-request'
      AutoPublish: true
      FunctionCode: !Sub
        - '${CloudFrontViewerRequestCode}'
        - Stage: !Ref Stage
          StageRoot: !Ref StageRoot
          StageRootUrl: !Ref StageRootUrl
          CloudFrontKeyValueStore: !GetAtt CloudFrontKeyValueStore.Id
      FunctionConfig:
        Comment: !Sub 'Created by SAM by ${AWS::StackName}'
        KeyValueStoreAssociations:
          - KeyValueStoreARN: !GetAtt CloudFrontKeyValueStore.Arn
        Runtime: cloudfront-js-2.0

  CloudFrontViewerResponse:
    Type: AWS::CloudFront::Function
    Properties:
      Name: !Sub '${AWS::StackName}-viewer-response'
      AutoPublish: true
      FunctionCode: !Sub
        - '${CloudFrontViewerResponseCode}'
        - Stage: !Ref Stage
      FunctionConfig:
        Comment: !Sub 'Created by SAM by ${AWS::StackName}'
        Runtime: cloudfront-js-2.0

  Route53:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref ZoneId
      RecordSets:
        - Name: !Sub '${StageRoot}.'
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2 # CloudFront alias
            DNSName: !GetAtt CloudFront.DomainName
        - Name: !Sub '${StageRoot}.'
          Type: AAAA
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2 # CloudFront alias
            DNSName: !GetAtt CloudFront.DomainName

  ApiGatewayRest:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${AWS::StackName}-rest-api'
      Description: !Sub 'Created by SAM by ${AWS::StackName}'
      BinaryMediaTypes:
        - 'application/octet-stream'
        - 'audio/*'
        - 'video/*'
        - 'application/pdf'
        - 'font/*'
      EndpointConfiguration:
        Types:
          - REGIONAL
      Tags:
        - Key: 'Name'
          Value: !Sub '${AWS::StackName}-rest-api'
        - Key: 'ManagedBy'
          Value: !Ref Stack

  ApiGatewayRestMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRest
      ResourceId: !GetAtt ApiGatewayRest.RootResourceId
      HttpMethod: HEAD
      AuthorizationType: AWS_IAM
      Integration:
        Type: MOCK

  ApiGatewayRestDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGatewayRestMethod
    Properties:
      RestApiId: !Ref ApiGatewayRest

  ApiGatewayRestLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/apigateway/rest-api/${AWS::StackName}'
      RetentionInDays: !Ref LogRetentionInDays
      Tags:
        - Key: 'Name'
          Value: !Sub '${AWS::StackName} rest api log group'
        - Key: 'ManagedBy'
          Value: !Ref Stack

  ApiGatewayRestApiWafAcl:
    Type: AWS::WAFv2::WebACL
    Condition: IsWafEnabled
    Properties:
      DefaultAction:
        Allow: {}
      Scope: REGIONAL
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: !Sub '${AWS::StackName}-waf-acl-rest-api'
      Rules:
        - Name: RateLimit
          Priority: 0
          Action:
            Block:
              CustomResponse:
                ResponseCode: 429
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: !Sub '${AWS::StackName}-waf-acl-rest-api-rate-limit'
          Statement:
            RateBasedStatement:
              AggregateKeyType: IP
              Limit: 1000
        - Name: AWS-AWSManagedRulesCommonRuleSet
          Priority: 1
          OverrideAction:
            None: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: !Sub '${AWS::StackName}-waf-acl-rest-api-common'
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesCommonRuleSet
              ExcludedRules:
                - Name: 'SizeRestrictions_BODY'
        - Name: block-too-large-body-requests
          Priority: 2
          Statement:
            AndStatement:
              Statements:
                - LabelMatchStatement:
                    Scope: LABEL
                    Key: awswaf:managed:aws:core-rule-set:SizeRestrictions_Body
                - NotStatement:
                    Statement:
                      ByteMatchStatement:
                        SearchString: !Sub '/${Stage}/api-rest/sentry-tunnel'
                        FieldToMatch:
                          UriPath: {}
                        TextTransformations:
                          - Priority: 0
                            Type: NONE
                        PositionalConstraint: STARTS_WITH
          Action:
            Block: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: !Sub '${AWS::StackName}-block-too-large-body-requests'
        - Name: AWS-ManagedRulesKnownBadInputsRuleSet
          Priority: 3
          OverrideAction:
            None: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: !Sub '${AWS::StackName}-waf-acl-rest-api-bad-inputs'
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesKnownBadInputsRuleSet
        - Name: AWS-ManagedRulesAmazonIpReputationList
          Priority: 4
          OverrideAction:
            None: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: !Sub '${AWS::StackName}-waf-acl-rest-api-ip-reputation'
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesAmazonIpReputationList
  ApiGatewayRestApiWafAssocation:
    Type: AWS::WAFv2::WebACLAssociation
    Condition: IsWafEnabled
    DependsOn: ApiGatewayRestStage
    Properties:
      ResourceArn: !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}::/restapis/${ApiGatewayRest}/stages/${Stage}'
      WebACLArn: !GetAtt ApiGatewayRestApiWafAcl.Arn
  ApiGatewayRestApiWafLogGroup:
    Type: AWS::Logs::LogGroup
    Condition: IsWafEnabled
    Properties:
      LogGroupName: !Sub 'aws-waf-logs-rest-api/${AWS::StackName}'
      RetentionInDays: !Ref LogRetentionInDays
      Tags:
        - Key: 'Name'
          Value: !Sub '${AWS::StackName} waf acl log group for rest api'
        - Key: 'ManagedBy'
          Value: !Ref Stack
  ApiGatewayRestApiWafLogging:
    Type: AWS::WAFv2::LoggingConfiguration
    Condition: IsWafEnabled
    Properties:
      LogDestinationConfigs:
        - !Select [0, !Split [':*', !GetAtt ApiGatewayRestApiWafLogGroup.Arn]]
      LoggingFilter:
        DefaultBehavior: DROP
        Filters:
          - Behavior: KEEP
            Conditions:
              - ActionCondition:
                  Action: BLOCK
            Requirement: MEETS_ANY
      ResourceArn: !GetAtt ApiGatewayRestApiWafAcl.Arn
  ApiGatewayRestStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref ApiGatewayRest
      DeploymentId: !Ref ApiGatewayRestDeployment
      StageName: !Ref Stage
      AccessLogSetting:
        DestinationArn: !GetAtt ApiGatewayRestLogGroup.Arn
        Format: !Ref ApiGatewayRestLogFormat
      TracingEnabled: true
      MethodSettings:
        - MetricsEnabled: true
          HttpMethod: '*'
          ResourcePath: '/*'
          ThrottlingRateLimit: 2000
          ThrottlingBurstLimit: 1000
      Tags:
        - Key: 'Name'
          Value: !Sub '${AWS::StackName} rest api default stage'
        - Key: 'ManagedBy'
          Value: !Ref Stack

  ApiGatewayWebSocket:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub '${AWS::StackName}-websocket'
      Description: !Sub 'Created by SAM by ${AWS::StackName}'
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.type
      Tags:
        Name: !Sub '${AWS::StackName} websocket'
        ManagedBy: !Ref Stack

  ApiGatewayWebSocketLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/apigateway/${ApiGatewayWebSocket}/${Stage}'
      RetentionInDays: !Ref LogRetentionInDays
      Tags:
        - Key: 'Name'
          Value: !Sub '${AWS::StackName} websocket api log group'
        - Key: 'ManagedBy'
          Value: !Ref Stack

  ApiGatewayWebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref ApiGatewayWebSocket
      StageName: !Ref Stage
      AutoDeploy: true
      DefaultRouteSettings:
        DetailedMetricsEnabled: true
        DataTraceEnabled: false
        LoggingLevel: 'ERROR'
        ThrottlingBurstLimit: 500
        ThrottlingRateLimit: 1000
      Tags:
        Name: !Sub '${AWS::StackName} websocket ${Stage} stage'
        ManagedBy: !Ref Stack

  StaticCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        Comment: !Sub 'Created by SAM by ${AWS::StackName}'
        DefaultTTL: 0
        Name: !Sub '${AWS::StackName}Static'
        MinTTL: 0
        MaxTTL: 31536000
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: none
          QueryStringsConfig:
            QueryStringBehavior: none
          EnableAcceptEncodingBrotli: true
          EnableAcceptEncodingGzip: true
          HeadersConfig:
            HeaderBehavior: none

  QueryCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        Comment: !Sub 'Created by SAM by ${AWS::StackName}'
        DefaultTTL: 0
        Name: !Sub '${AWS::StackName}Query'
        MinTTL: 0
        MaxTTL: 31536000
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: 'whitelist'
            Cookies:
              - token
          QueryStringsConfig:
            QueryStringBehavior: whitelist
            QueryStrings:
              - token
          EnableAcceptEncodingBrotli: true
          EnableAcceptEncodingGzip: true
          HeadersConfig:
            HeaderBehavior: 'whitelist'
            Headers:
              - range
              - x-api

  BasicOriginRequestPolicy:
    Type: AWS::CloudFront::OriginRequestPolicy
    Properties:
      OriginRequestPolicyConfig:
        Comment: !Sub 'Created by SAM by ${AWS::StackName}'
        Name: !Sub '${AWS::StackName}BasicOriginRequestPolicy'
        CookiesConfig:
          CookieBehavior: 'whitelist'
          Cookies:
            - token
        QueryStringsConfig:
          QueryStringBehavior: 'all'
        HeadersConfig:
          HeaderBehavior: 'whitelist'
          Headers:
            Fn::If:
              - CaptureUserLanguageAndDevice
              - - content-type
                - accept
                - user-agent
                - range
                - CloudFront-Viewer-Country-Name
                - CloudFront-Is-Tablet-Viewer
                - CloudFront-Is-Mobile-Viewer
                - CloudFront-Is-Desktop-Viewer
              - - content-type
                - accept
                - user-agent
                - range
                - CloudFront-Is-Tablet-Viewer
                - CloudFront-Is-Mobile-Viewer
                - CloudFront-Is-Desktop-Viewer

  WebsocketOriginRequestPolicy:
    Type: AWS::CloudFront::OriginRequestPolicy
    Properties:
      OriginRequestPolicyConfig:
        Comment: !Sub 'Created by SAM by ${AWS::StackName}'
        Name: !Sub '${AWS::StackName}WebSocketOriginRequestPolicy'
        CookiesConfig:
          CookieBehavior: whitelist
          Cookies:
            - token
        QueryStringsConfig:
          QueryStringBehavior: none
        HeadersConfig:
          HeaderBehavior: whitelist
          Headers:
            Fn::If:
              - CaptureUserLanguageAndDevice
              - - user-agent
                - Sec-WebSocket-Key
                - Sec-WebSocket-Version
                - Sec-WebSocket-Protocol
                - Sec-WebSocket-Accept
                - CloudFront-Viewer-Country-Name
                - CloudFront-Is-Tablet-Viewer
                - CloudFront-Is-Mobile-Viewer
                - CloudFront-Is-Desktop-Viewer
                - x-url
              - - user-agent
                - Sec-WebSocket-Key
                - Sec-WebSocket-Version
                - Sec-WebSocket-Protocol
                - Sec-WebSocket-Accept
                - CloudFront-Is-Tablet-Viewer
                - CloudFront-Is-Mobile-Viewer
                - CloudFront-Is-Desktop-Viewer
                - x-url

  S3ReplicateFunction:
    Condition: ShouldReplicate
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/s3-replicate/
      Handler: index.handler
      Description: 'replicate cloudfront logs'
      Timeout: 6
      MemorySize: 128
      Environment:
        Variables:
          S3_BACKUP_BUCKET: !Ref S3BackupBucket
          S3_BACKUP_BUCKET_REGION: !Ref BackupRegion
      Policies:
        - Version: 2012-10-17
          Statement:
            - Sid: S3Read
              Action:
                - s3:GetObject
                - s3:GetObjectTagging
              Resource:
                - !Sub '${S3CloudFrontLogs.Arn}/*'
              Effect: Allow
        - Version: 2012-10-17
          Statement:
            - Sid: S3Write
              Action:
                - s3:PutObject
                - s3:PutObjectACL
                - s3:PutObjectTagging
              Resource:
                - !Sub 'arn:${AWS::Partition}:s3:::${S3BackupBucket}/*'
              Effect: Allow
        - SQSSendMessagePolicy:
            QueueName: !GetAtt LambdaDlq.QueueName
        - Version: 2012-10-17
          Statement:
            - Sid: CloudWatchLogGroup
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !GetAtt CloudWatchLogGroup.Arn
              Effect: Allow
      LoggingConfig:
        LogGroup: !Ref CloudWatchLogGroup
      Events:
        Trigger:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - 'aws.s3'
              detail-type:
                - 'Object Created'
              detail:
                bucket:
                  name:
                    - !Ref S3CloudFrontLogs
            DeadLetterConfig:
              Arn: !GetAtt EventsDlq.Arn
            RetryPolicy:
              MaximumEventAgeInSeconds: 900
              MaximumRetryAttempts: 3
      DeadLetterQueue:
        TargetArn: !GetAtt LambdaDlq.Arn
        Type: SQS
      EventInvokeConfig:
        DestinationConfig:
          OnFailure:
            Type: SQS
            Destination: !GetAtt LambdaDlq.Arn
        MaximumEventAgeInSeconds: 900
        MaximumRetryAttempts: 2
    Metadata:
      BuildMethod: makefile

  ApiJwtSecretChangedFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/api-jwt-secret-changed/
      Handler: index.handler
      Description: 'propagate jwt secret to cloudfront functions and invalidate authorizer cache'
      Timeout: 6
      MemorySize: 128
      Environment:
        Variables:
          REST_API_ID: !Ref ApiGatewayRest
          KvsARN: !GetAtt CloudFrontKeyValueStore.Arn
          SSM_API_JWT_SECRET: !Sub /${Stack}/${Stage}/API_JWT_SECRET
          STAGE: !Ref Stage
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt LambdaDlq.QueueName
        - SSMParameterReadPolicy:
            ParameterName: !Sub ${Stack}/${Stage}/API_JWT_SECRET
        - Version: 2012-10-17
          Statement:
            - Sid: CloudWatchLogGroup
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !GetAtt CloudWatchLogGroup.Arn
              Effect: Allow
        - Version: 2012-10-17
          Statement:
            - Sid: ApiGateway
              Action:
                - 'apigateway:DELETE'
              Effect: Allow
              Resource:
                - !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}::/restapis/${ApiGatewayRest}/stages/${Stage}/cache/authorizers'
        - Version: 2012-10-17
          Statement:
            - Sid: CloudFrontKeyValueStore
              Action:
                - 'cloudfront-keyvaluestore:DescribeKeyValueStore'
                - 'cloudfront-keyvaluestore:GetKey'
                - 'cloudfront-keyvaluestore:PutKey'
              Effect: Allow
              Resource:
                - !GetAtt CloudFrontKeyValueStore.Arn
      LoggingConfig:
        LogGroup: !Ref CloudWatchLogGroup
      Events:
        Trigger:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - 'aws.ssm'
              detail-type:
                - 'Parameter Store Change'
              detail:
                name:
                  - !Sub /${Stack}/${Stage}/API_JWT_SECRET
                operation:
                  - Create
                  - Update
            DeadLetterConfig:
              Arn: !GetAtt EventsDlq.Arn
            RetryPolicy:
              MaximumEventAgeInSeconds: 900
              MaximumRetryAttempts: 3
      DeadLetterQueue:
        TargetArn: !GetAtt LambdaDlq.Arn
        Type: SQS
      EventInvokeConfig:
        DestinationConfig:
          OnFailure:
            Type: SQS
            Destination: !GetAtt LambdaDlq.Arn
        MaximumEventAgeInSeconds: 900
        MaximumRetryAttempts: 2
    Metadata:
      BuildMethod: makefile

  SentryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/sentry/
      Handler: index.handler
      Description: 'send waf cloudwatch logs to sentry'
      Timeout: 6
      MemorySize: 128
      Environment:
        Variables:
          SENTRY_DSN: !Ref SentryDSN
          SENTRY_ENVIRONMENT: !Ref SentryEnvironment
          SENTRY_TUNNEL: !Sub ${StageRootUrl}/api/rest/sentry-tunnel
          STAGE: !Ref Stage
      Policies:
        - Version: 2012-10-17
          Statement:
            - Sid: CloudWatchLogGroup
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !GetAtt CloudWatchLogGroup.Arn
              Effect: Allow
      LoggingConfig:
        LogGroup: !Ref CloudWatchLogGroup
    Metadata:
      BuildMethod: makefile

  WebSocketAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/request-auth/
      Handler: index.webSocketAuth
      Description: 'websocket authorizer'
      Timeout: 6
      MemorySize: 128
      Environment:
        Variables:
          SSM_API_JWT_SECRET: !Sub /${Stack}/${Stage}/API_JWT_SECRET
          DYNAMODB_TABLE: !Ref DynamoDBStackTableName
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: !Sub ${Stack}/${Stage}/API_JWT_SECRET
        - Version: 2012-10-17
          Statement:
            - Sid: CloudWatchLogGroup
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !GetAtt CloudWatchLogGroup.Arn
              Effect: Allow
        - Version: 2012-10-17
          Statement:
            - Sid: DynamoDB
              Action:
                - dynamodb:GetItem
              Resource:
                - !Sub 'arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBStackTableName}'
              Effect: Allow
              Condition:
                ForAllValues:StringLike:
                  dynamodb:LeadingKeys:
                    - 'session#*'
      LoggingConfig:
        LogGroup: !Ref CloudWatchLogGroup
    Metadata:
      BuildMethod: makefile

  WebSocketAnonymousAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/request-auth/
      Handler: index.webSocketAnonymousAuth
      Description: 'websocket anonmymous authorizer'
      Timeout: 6
      MemorySize: 128
      Environment:
        Variables:
          SSM_API_JWT_SECRET: !Sub /${Stack}/${Stage}/API_JWT_SECRET
          DYNAMODB_TABLE: !Ref DynamoDBStackTableName
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: !Sub ${Stack}/${Stage}/API_JWT_SECRET
        - Version: 2012-10-17
          Statement:
            - Sid: CloudWatchLogGroup
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !GetAtt CloudWatchLogGroup.Arn
              Effect: Allow
        - Version: 2012-10-17
          Statement:
            - Sid: DynamoDB
              Action:
                - dynamodb:GetItem
              Resource:
                - !Sub 'arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBStackTableName}'
              Effect: Allow
              Condition:
                ForAllValues:StringLike:
                  dynamodb:LeadingKeys:
                    - 'session#*'
      LoggingConfig:
        LogGroup: !Ref CloudWatchLogGroup
    Metadata:
      BuildMethod: makefile

  HttpAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/request-auth/
      Handler: index.httpAuth
      Description: 'http authorizer'
      Timeout: 6
      MemorySize: 128
      Environment:
        Variables:
          SSM_API_JWT_SECRET: !Sub /${Stack}/${Stage}/API_JWT_SECRET
          DYNAMODB_TABLE: !Ref DynamoDBStackTableName
      Policies:
        - Version: 2012-10-17
          Statement:
            - Sid: ApiGateway
              Action:
                - apigateway:GET
              Resource:
                - !Sub arn:${AWS::Partition}:apigateway:*::/restapis*
                - !Sub arn:${AWS::Partition}:apigateway:*::/apikeys*
                - !Sub arn:${AWS::Partition}:apigateway:*::/usageplans*
              Effect: Allow
        - Version: 2012-10-17
          Statement:
            - Sid: DynamoDB
              Action:
                - dynamodb:GetItem
              Resource:
                - !Sub 'arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBStackTableName}'
              Effect: Allow
              Condition:
                ForAllValues:StringLike:
                  dynamodb:LeadingKeys:
                    - 'session#*'
        - SSMParameterReadPolicy:
            ParameterName: !Sub ${Stack}/${Stage}/API_JWT_SECRET
        - Version: 2012-10-17
          Statement:
            - Sid: CloudWatchLogGroup
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !GetAtt CloudWatchLogGroup.Arn
              Effect: Allow
        - Version: 2012-10-17
          Statement:
            - Sid: DynamoDB
              Action:
                - dynamodb:GetItem
              Resource:
                - !Sub 'arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBStackTableName}'
              Effect: Allow
              Condition:
                ForAllValues:StringLike:
                  dynamodb:LeadingKeys:
                    - 'session#*'
      LoggingConfig:
        LogGroup: !Ref CloudWatchLogGroup
    Metadata:
      BuildMethod: makefile

  HttpAnonymousAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/request-auth/
      Handler: index.httpAnonymousAuth
      Description: 'http anonmymous authorizer'
      Timeout: 6
      MemorySize: 128
      Environment:
        Variables:
          SSM_API_JWT_SECRET: !Sub /${Stack}/${Stage}/API_JWT_SECRET
          DYNAMODB_TABLE: !Ref DynamoDBStackTableName
      Policies:
        - Version: 2012-10-17
          Statement:
            - Sid: ApiGateway
              Action:
                - apigateway:GET
              Resource:
                - !Sub arn:${AWS::Partition}:apigateway:*::/restapis*
                - !Sub arn:${AWS::Partition}:apigateway:*::/apikeys*
                - !Sub arn:${AWS::Partition}:apigateway:*::/usageplans*
              Effect: Allow
        - SSMParameterReadPolicy:
            ParameterName: !Sub ${Stack}/${Stage}/API_JWT_SECRET
        - Version: 2012-10-17
          Statement:
            - Sid: CloudWatchLogGroup
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !GetAtt CloudWatchLogGroup.Arn
              Effect: Allow
        - Version: 2012-10-17
          Statement:
            - Sid: DynamoDB
              Action:
                - dynamodb:GetItem
              Resource:
                - !Sub 'arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBStackTableName}'
              Effect: Allow
              Condition:
                ForAllValues:StringLike:
                  dynamodb:LeadingKeys:
                    - 'session#*'
      LoggingConfig:
        LogGroup: !Ref CloudWatchLogGroup
    Metadata:
      BuildMethod: makefile

  ApiGatewayRestApiAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      RestApiId: !Ref ApiGatewayRest
      Name: !Sub '${AWS::StackName}-apigw-restapi-authorizer'
      Type: 'REQUEST'
      AuthorizerResultTtlInSeconds: 900
      AuthorizerUri: !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HttpAuthFunction.Arn}/invocations'
      IdentitySource: 'method.request.header.cookie'

  ApiGatewayRestApiAuthorizerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt HttpAuthFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub 'arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRest}/authorizers/${ApiGatewayRestApiAuthorizer}'

  ApiGatewayRestApiAnonymousAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      RestApiId: !Ref ApiGatewayRest
      Name: !Sub '${AWS::StackName}-apigw-restapi-anonymous-authorizer'
      Type: 'REQUEST'
      AuthorizerResultTtlInSeconds: 900
      AuthorizerUri: !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HttpAuthFunction.Arn}/invocations'
      IdentitySource: 'method.request.header.cookie'

  ApiGatewayRestApiAnonymousAuthorizerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt HttpAnonymousAuthFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub 'arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRest}/authorizers/${ApiGatewayRestApiAnonymousAuthorizer}'

Outputs:
  DistributionId:
    Description: CloudFront distribution id
    Value: !Ref CloudFront
    Export:
      Name: !Sub '${AWS::StackName}DistributionId'
  S3CloudFrontLogsBucket:
    Description: S3 Bucket for cloudfront logs
    Value: !Ref S3CloudFrontLogs
    Export:
      Name: !Sub '${AWS::StackName}S3CloudFrontLogsBucket'
  S3StaticBucket:
    Description: S3 Bucket for static content
    Value: !Ref S3Static
    Export:
      Name: !Sub '${AWS::StackName}S3StaticBucket'
  S3MediaBucket:
    Description: S3 Bucket for media content
    Value: !Ref S3Media
    Export:
      Name: !Sub '${AWS::StackName}S3MediaBucket'
  S3ProtectedMediaBucket:
    Description: S3 Bucket for protected media content
    Value: !Ref S3ProtectedMedia
    Export:
      Name: !Sub '${AWS::StackName}S3ProtectedMediaBucket'
  S3ProtectedMediaLogsBucket:
    Description: S3 Bucket for protected media content access logs
    Value: !Ref S3ProtectedMediaLogs
    Export:
      Name: !Sub '${AWS::StackName}S3ProtectedMediaLogsBucket'
  ApiGatewayRest:
    Description: Api Gateway rest api
    Value: !Ref ApiGatewayRest
    Export:
      Name: !Sub '${AWS::StackName}ApigwRest'

  ApiGatewayRestResourceId:
    Description: Api gateway rest api root resource id
    Value: !GetAtt ApiGatewayRest.RootResourceId
    Export:
      Name: !Sub '${AWS::StackName}ApigwRestRootResourceId'

  ApiGatewayRestApiAuthorizer:
    Description: api gateway restapi authorizer
    Value: !Ref ApiGatewayRestApiAuthorizer
    Export:
      Name: !Sub '${AWS::StackName}ApigwRestApiAuthorizer'

  ApiGatewayRestApiAnonymousAuthorizer:
    Description: api gateway restapi authorizer allowing anonymous access
    Value: !Ref ApiGatewayRestApiAnonymousAuthorizer
    Export:
      Name: !Sub '${AWS::StackName}ApigwRestApiAnonymousAuthorizer'

  ApiGatewayWebSocket:
    Description: Api gateway websocket
    Value: !Ref ApiGatewayWebSocket
    Export:
      Name: !Sub '${AWS::StackName}ApigwWebSocket'

  WebSocketAuthFunction:
    Description: lambda websocket authorizer
    Value: !GetAtt WebSocketAuthFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}WebSocketAuthFunction'

  ApiJwtSecretChangedFunction:
    Description: lambda to propagate key changes
    Value: !GetAtt ApiJwtSecretChangedFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}ApiJwtSecretChangedFunction'

  WebSocketAnonymousAuthFunction:
    Description: lambda websocket authorizer allowing anonymous access
    Value: !GetAtt WebSocketAnonymousAuthFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}WebSocketAnonymousAuthFunction'
