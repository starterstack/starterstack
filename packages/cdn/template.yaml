AWSTemplateFormatVersion: 2010-09-09
Transform:
  - AWS::LanguageExtensions
  - AWS::Serverless-2016-10-31

Description: CDN

Globals:
  Function:
    Tracing: Active
    Architectures:
      - arm64
    Runtime: nodejs20.x
    PropagateTags: true
    Environment:
      Variables:
        GIT_COMMIT: !Ref GITCommit

Parameters:
  Stack:
    Type: String
  Stage:
    Type: String
  StageRoot:
    Type: String
  S3BackupBucket:
    Type: String
  BackupRegion:
    Type: String
  StageRootUrl:
    Type: String
  AccountPerStage:
    Type: String
  PriceClass:
    Type: String
  CloudFrontWafACL:
    Type: String
  AcmCertificateArn:
    Type: String
  LogRetentionInDays:
    Type: String
  GITCommit:
    Type: String
  ZoneId:
    Type: String
  CloudFrontViewerRequestCode:
    Type: String
  CloudFrontViewerResponseCode:
    Type: String
  SNSAlarmTopic:
    Type: String
  StaticCachePolicy:
    Type: String
  QueryCachePolicy:
    Type: String
  BasicOriginRequestPolicy:
    Type: String
  WebSocketOriginRequestPolicy:
    Type: String
  CloudFrontResponseHeaderPolicy:
    Type: String
  S3StaticBucket:
    Type: String
  S3MediaBucket:
    Type: String
  S3ProtectedMediaBucket:
    Type: String
  ApiGatewayRest:
    Type: String
  ApiGatewayGraphQL:
    Type: String
  ApiGatewayWeb:
    Type: String
  ApiGatewayWebSocket:
    Type: String

Metadata:
  expand:
    plugins:
      - '../git.mjs'
      - '../hash.mjs'
      - '../stack-stage-config.mjs'
      - '@starterstack/sam-expand/plugins/parameter-overrides'
      - '@starterstack/sam-expand/plugins/run-script-hooks'
      - '../purge-lambda-versions.mjs'
      - '../generate-cloudwatch-alarms.mjs'
    config:
      stackStageConfig:
        suffixStage: true
        addMappings: true
      parameterOverrides:
        - location: ../stack-stage-config.mjs
          overrides:
            - name: StageRoot
              exportName: stageOrStackRoot
            - name: StageRootUrl
              exportName: stageRootUrl
            - name: AccountPerStage
              exportName: accountPerStage
            - name: S3BackupBucket
              exportName: ssmS3BackupBucket
            - name: BackupRegion
              exportName: backupRegion
            - name: AcmCertificateArn
              exportName: acmCertificateArn
            - name: CloudFrontWafACL
              exportName: cloudFrontWafACL
              defaultValue: 'CloudFrontWafACL'
            - name: LogRetentionInDays
              exportName: logRetentionInDays
            - name: ZoneId
              exportName: zoneId
            - name: SNSAlarmTopic
              exportName: snsAlarmTopic
            - name: StaticCachePolicy
              exportName: staticCachePolicy
            - name: QueryCachePolicy
              exportName: queryCachePolicy
            - name: BasicOriginRequestPolicy
              exportName: basicOriginRequestPolicy
            - name: WebSocketOriginRequestPolicy
              exportName: webSocketOriginRequestPolicy
            - name: CloudFrontResponseHeaderPolicy
              exportName: cloudFrontResponseHeaderPolicy
            - name: S3StaticBucket
              exportName: s3Static
            - name: S3MediaBucket
              exportName: s3Media
            - name: S3ProtectedMediaBucket
              exportName: s3ProtectedMedia
            - name: ApiGatewayRest
              exportName: apiGatewayRest
            - name: ApiGatewayWeb
              exportName: apiGatewayWeb
            - name: ApiGatewayGraphQL
              exportName: apiGatewayGraphQL
            - name: ApiGatewayWebSocket
              exportName: apiGatewayWebSocket
        - location: ../settings.json
          overrides:
            - name: PriceClass
              exportName: priceClass
        - location: ./cloudfront-functions.mjs
          overrides:
            - name: CloudFrontViewerRequestCode
              exportName: viewerRequestCode
            - name: CloudFrontViewerResponseCode
              exportName: viewerResponseCode
        - location: ../git.mjs
          overrides:
            - name: GITCommit
              exportName: commit
      purgeLambdaVersions:
        keep: 3
      script:
        hooks:
          pre:build:
            - command: npm
              args:
                - value: --prefix
                - value: ./unit/test
                - value: test
          pre:delete:
            - command: ../empty-s3-bucket.sh
              args:
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: s3CloudFrontLogs
            - command: ../empty-s3-bucket.sh
              args:
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: s3ProtectedMediaLogs
          post:deploy:
            - command: ../tag-cloudwatch-alarms.sh
              args:
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: stackName
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: region
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: stage
            - command: ../tag-eventbus-rules.sh
              args:
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: stackName
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: region
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: stage
            - command: ./scripts/upsert-cloudfront-keyvalue-store.sh
              args:
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: stackName
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: region
      alarms:
        snsTopicRef: SNSAlarmTopic

Conditions:
  ShouldReplicate: !And
    - !Equals
      - !Ref AccountPerStage
      - 'true'
    - !Equals
      - !Ref Stage
      - 'prod'
  IsWafEnabled: !Equals
    - !FindInMap
      - AWSAccounts
      - !Ref 'AWS::AccountId'
      - wafEnabled
    - true

Resources:
  CloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}
      RetentionInDays: !Ref LogRetentionInDays
      Tags:
        - Key: 'Name'
          Value: !Sub '${AWS::StackName} lambda logs'
        - Key: 'ManagedBy'
          Value: !Ref Stack
  EventsDlq:
    Type: AWS::SQS::Queue
    Properties:
      SqsManagedSseEnabled: true
      Tags:
        - Key: 'Name'
          Value: !Sub '${AWS::StackName}-events-dlq'
        - Key: 'ManagedBy'
          Value: !Ref Stack
  EventsDlqPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - 'sqs:SendMessage'
            Principal:
              Service: 'events.amazonaws.com'
            Resource: !GetAtt EventsDlq.Arn
            Condition:
              ArnEquals:
                'aws:SourceArn': !Sub 'arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/${AWS::StackName}*'
          - Effect: Allow
            Action:
              - 'sqs:SendMessage'
            Principal:
              Service: 'sns.amazonaws.com'
            Resource: !GetAtt EventsDlq.Arn
            Condition:
              ArnEquals:
                'aws:SourceArn': !Sub 'arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:${AWS::StackName}*'
      Queues:
        - !Ref EventsDlq
  LambdaDlq:
    Type: AWS::SQS::Queue
    Properties:
      SqsManagedSseEnabled: true
      Tags:
        - Key: 'Name'
          Value: !Sub ${AWS::StackName}-lambda-dlq
        - Key: 'ManagedBy'
          Value: !Ref Stack

  S3CloudFrontLogs:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      LifecycleConfiguration:
        Rules:
          - Id: TransitionToIntelligentTiering
            Status: Enabled
            Transitions:
              - StorageClass: INTELLIGENT_TIERING
                TransitionInDays: 0
          - Id: ExpirationInDays
            Status: Enabled
            ExpirationInDays: 7
          - Id: ExpireNonCurrent
            ExpiredObjectDeleteMarker: true
            Status: Enabled
          - Id: NonCurrentRetention
            Status: Enabled
            NoncurrentVersionExpiration:
              NoncurrentDays: 1
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
      VersioningConfiguration:
        Status: Enabled
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
      Tags:
        - Key: 'Name'
          Value: !Sub ${AWS::StackName}-s3-cloudfront-logs
        - Key: 'ManagedBy'
          Value: !Ref Stack

  S3CloudFrontLogsPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3CloudFrontLogs
      PolicyDocument:
        Version: '2012-10-17'
        Id: PolicyForCloudFrontLogs
        Statement:
          - Effect: Deny
            Action: 's3:*'
            Resource:
              - !Sub '${S3CloudFrontLogs.Arn}'
              - !Sub '${S3CloudFrontLogs.Arn}/*'
            Principal: '*'
            Condition:
              Bool:
                'aws:SecureTransport': false

  CloudFrontKeyValueStore:
    Type: AWS::CloudFront::KeyValueStore
    Properties:
      Comment: !Sub '${AWS::StackName} key value store'
      Name: !Sub '${Stack}-${Stage}-Store'

  S3StaticPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3StaticBucket
      PolicyDocument:
        Version: '2012-10-17'
        Id: PolicyForCloudFrontPrivateContent
        Statement:
          - Effect: Deny
            Action: 's3:*'
            Resource:
              - !Sub 'arn:${AWS::Partition}:s3:::${S3StaticBucket}'
              - !Sub 'arn:${AWS::Partition}:s3:::${S3StaticBucket}/*'
            Principal: '*'
            Condition:
              Bool:
                'aws:SecureTransport': false
          - Effect: Allow
            Action:
              - 's3:GetObject'
            Resource:
              - !Sub 'arn:${AWS::Partition}:s3:::${S3StaticBucket}/*'
            Condition:
              Bool:
                'aws:SecureTransport': true
              StringEquals:
                'AWS:SourceArn': !Sub 'arn:${AWS::Partition}:cloudfront::${AWS::AccountId}:distribution/${CloudFront}'
            Principal:
              Service: 'cloudfront.amazonaws.com'

  S3MediaPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3MediaBucket
      PolicyDocument:
        Version: '2012-10-17'
        Id: PolicyForCloudFrontPrivateContent
        Statement:
          - Effect: Deny
            Action: 's3:*'
            Resource:
              - !Sub 'arn:${AWS::Partition}:s3:::${S3MediaBucket}'
              - !Sub 'arn:${AWS::Partition}:s3:::${S3MediaBucket}/*'
            Principal: '*'
            Condition:
              Bool:
                'aws:SecureTransport': false
          - Effect: Allow
            Action:
              - 's3:GetObject'
            Resource: !Sub 'arn:${AWS::Partition}:s3:::${S3MediaBucket}/*'
            Condition:
              Bool:
                'aws:SecureTransport': true
              StringEquals:
                'AWS:SourceArn': !Sub 'arn:${AWS::Partition}:cloudfront::${AWS::AccountId}:distribution/${CloudFront}'
            Principal:
              Service: 'cloudfront.amazonaws.com'

  S3ProtectedMediaPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3ProtectedMediaBucket
      PolicyDocument:
        Version: '2012-10-17'
        Id: PolicyForCloudFrontPrivateContent
        Statement:
          - Effect: Deny
            Action: 's3:*'
            Resource:
              - !Sub 'arn:${AWS::Partition}:s3:::${S3ProtectedMediaBucket}'
              - !Sub 'arn:${AWS::Partition}:s3:::${S3ProtectedMediaBucket}/*'
            Principal: '*'
            Condition:
              Bool:
                'aws:SecureTransport': false
          - Effect: Allow
            Action:
              - 's3:GetObject'
            Resource: !Sub 'arn:${AWS::Partition}:s3:::${S3ProtectedMediaBucket}/*'
            Condition:
              Bool:
                'aws:SecureTransport': true
              StringEquals:
                'AWS:SourceArn': !Sub 'arn:${AWS::Partition}:cloudfront::${AWS::AccountId}:distribution/${CloudFront}'
            Principal:
              Service: 'cloudfront.amazonaws.com'

  CloudFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        IPV6Enabled: true
        HttpVersion: http2and3
        Aliases:
          - !Ref StageRoot
        Comment: !Sub 'Created by SAM by ${AWS::StackName}'
        PriceClass: !Ref PriceClass
        WebACLId: !If
          - IsWafEnabled
          - !Ref CloudFrontWafACL
          - !Ref AWS::NoValue
        Origins:
          - Id: S3StaticOrigin
            DomainName: !Sub ${S3StaticBucket}.s3.${AWS::Region}.amazonaws.com
            OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
            S3OriginConfig: {}
            OriginShield:
              Enabled: true
              OriginShieldRegion: !Sub '${AWS::Region}'
          - Id: ApiGatewayWebOrigin
            DomainName: !Sub '${ApiGatewayWeb}.execute-api.${AWS::Region}.amazonaws.com'
            CustomOriginConfig:
              OriginProtocolPolicy: match-viewer
            OriginShield:
              Enabled: true
              OriginShieldRegion: !Sub '${AWS::Region}'
          - Id: ApiGatewayRestOrigin
            DomainName: !Sub '${ApiGatewayRest}.execute-api.${AWS::Region}.amazonaws.com'
            CustomOriginConfig:
              OriginProtocolPolicy: match-viewer
            OriginShield:
              Enabled: true
              OriginShieldRegion: !Sub '${AWS::Region}'
          - Id: ApiGatewayGraphQLOrigin
            DomainName: !Sub '${ApiGatewayGraphQL}.execute-api.${AWS::Region}.amazonaws.com'
            CustomOriginConfig:
              OriginProtocolPolicy: match-viewer
            OriginShield:
              Enabled: true
              OriginShieldRegion: !Sub '${AWS::Region}'
          - Id: S3ProtectedMediaOrigin
            DomainName: !Sub ${S3ProtectedMediaBucket}.s3.${AWS::Region}.amazonaws.com
            OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
            S3OriginConfig: {}
            OriginShield:
              Enabled: true
              OriginShieldRegion: !Sub '${AWS::Region}'
          - Id: S3MediaOrigin
            DomainName: !Sub ${S3MediaBucket}.s3.${AWS::Region}.amazonaws.com
            OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
            S3OriginConfig: {}
            OriginShield:
              Enabled: true
              OriginShieldRegion: !Sub '${AWS::Region}'
          - Id: ApiGatewayWebSocketOrigin
            DomainName: !Sub '${ApiGatewayWebSocket}.execute-api.${AWS::Region}.amazonaws.com'
            CustomOriginConfig:
              OriginProtocolPolicy: match-viewer
        DefaultCacheBehavior:
          AllowedMethods: ['GET', 'HEAD']
          CachedMethods: ['GET', 'HEAD']
          CachePolicyId: !Ref StaticCachePolicy
          OriginRequestPolicyId: !Ref BasicOriginRequestPolicy
          TargetOriginId: ApiGatewayWebOrigin
          ViewerProtocolPolicy: redirect-to-https
          ResponseHeadersPolicyId: !Ref CloudFrontResponseHeaderPolicy
          SmoothStreaming: false
          Compress: true
          FunctionAssociations:
            - EventType: viewer-response
              FunctionARN: !GetAtt CloudFrontViewerResponse.FunctionARN
            - EventType: viewer-request
              FunctionARN: !GetAtt CloudFrontViewerRequest.FunctionARN
        CacheBehaviors:
          - AllowedMethods: ['GET', 'HEAD']
            CachedMethods: ['GET', 'HEAD']
            CachePolicyId: !Ref StaticCachePolicy
            OriginRequestPolicyId: !Ref BasicOriginRequestPolicy
            TargetOriginId: S3ProtectedMediaOrigin
            ViewerProtocolPolicy: redirect-to-https
            ResponseHeadersPolicyId: !Ref CloudFrontResponseHeaderPolicy
            SmoothStreaming: false
            Compress: true
            FunctionAssociations:
              - EventType: viewer-response
                FunctionARN: !GetAtt CloudFrontViewerResponse.FunctionARN
              - EventType: viewer-request
                FunctionARN: !GetAtt CloudFrontViewerRequest.FunctionARN
            PathPattern: '/media/~/*'
          - AllowedMethods: ['GET', 'HEAD']
            CachedMethods: ['GET', 'HEAD']
            CachePolicyId: !Ref StaticCachePolicy
            OriginRequestPolicyId: !Ref BasicOriginRequestPolicy
            TargetOriginId: S3MediaOrigin
            ViewerProtocolPolicy: redirect-to-https
            ResponseHeadersPolicyId: !Ref CloudFrontResponseHeaderPolicy
            SmoothStreaming: false
            Compress: true
            FunctionAssociations:
              - EventType: viewer-response
                FunctionARN: !GetAtt CloudFrontViewerResponse.FunctionARN
              - EventType: viewer-request
                FunctionARN: !GetAtt CloudFrontViewerRequest.FunctionARN
            PathPattern: '/media/*'
          - AllowedMethods: ['GET', 'HEAD']
            CachePolicyId: '4135ea2d-6df8-44a3-9df3-4b5a84be39ad' # disabled
            OriginRequestPolicyId: !Ref WebSocketOriginRequestPolicy
            TargetOriginId: ApiGatewayWebSocketOrigin
            ViewerProtocolPolicy: https-only
            ResponseHeadersPolicyId: !Ref CloudFrontResponseHeaderPolicy
            SmoothStreaming: false
            Compress: true
            FunctionAssociations:
              - EventType: viewer-response
                FunctionARN: !GetAtt CloudFrontViewerResponse.FunctionARN
              - EventType: viewer-request
                FunctionARN: !GetAtt CloudFrontViewerRequest.FunctionARN
            PathPattern: '/api/ws*'
          - AllowedMethods:
              ['GET', 'HEAD', 'PUT', 'PATCH', 'POST', 'DELETE', 'OPTIONS']
            CachedMethods: ['GET', 'HEAD']
            CachePolicyId: !Ref QueryCachePolicy
            OriginRequestPolicyId: !Ref BasicOriginRequestPolicy
            TargetOriginId: ApiGatewayRestOrigin
            ViewerProtocolPolicy: redirect-to-https
            ResponseHeadersPolicyId: !Ref CloudFrontResponseHeaderPolicy
            SmoothStreaming: false
            Compress: true
            FunctionAssociations:
              - EventType: viewer-response
                FunctionARN: !GetAtt CloudFrontViewerResponse.FunctionARN
              - EventType: viewer-request
                FunctionARN: !GetAtt CloudFrontViewerRequest.FunctionARN
            PathPattern: '/api/rest/*'
          - AllowedMethods:
              ['GET', 'HEAD', 'PUT', 'PATCH', 'POST', 'DELETE', 'OPTIONS']
            CachedMethods: ['GET', 'HEAD']
            CachePolicyId: !Ref QueryCachePolicy
            OriginRequestPolicyId: !Ref BasicOriginRequestPolicy
            TargetOriginId: ApiGatewayGraphQLOrigin
            ViewerProtocolPolicy: redirect-to-https
            ResponseHeadersPolicyId: !Ref CloudFrontResponseHeaderPolicy
            SmoothStreaming: false
            Compress: true
            FunctionAssociations:
              - EventType: viewer-response
                FunctionARN: !GetAtt CloudFrontViewerResponse.FunctionARN
              - EventType: viewer-request
                FunctionARN: !GetAtt CloudFrontViewerRequest.FunctionARN
            PathPattern: '/api/graphql'
          - AllowedMethods: ['GET', 'HEAD']
            CachedMethods: ['GET', 'HEAD']
            CachePolicyId: !Ref QueryCachePolicy
            OriginRequestPolicyId: !Ref BasicOriginRequestPolicy
            TargetOriginId: S3StaticOrigin
            ViewerProtocolPolicy: redirect-to-https
            ResponseHeadersPolicyId: !Ref CloudFrontResponseHeaderPolicy
            SmoothStreaming: false
            Compress: true
            FunctionAssociations:
              - EventType: viewer-response
                FunctionARN: !GetAtt CloudFrontViewerResponse.FunctionARN
              - EventType: viewer-request
                FunctionARN: !GetAtt CloudFrontViewerRequest.FunctionARN
            PathPattern: '/*.*'
        ViewerCertificate:
          AcmCertificateArn: !Ref AcmCertificateArn
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only
        Logging:
          Bucket: !GetAtt S3CloudFrontLogs.DomainName
      Tags:
        - Key: 'Name'
          Value: !Sub '${AWS::StackName}'
        - Key: 'ManagedBy'
          Value: !Ref Stack

  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub '${AWS::StackName} S3 Origin Access Control'
        Description: !Sub 'S3 OAC Created by SAM by ${AWS::StackName}'
        OriginAccessControlOriginType: 's3'
        SigningBehavior: 'always'
        SigningProtocol: 'sigv4'

  CloudFrontViewerRequest:
    Type: AWS::CloudFront::Function
    Properties:
      Name: !Sub '${AWS::StackName}-viewer-request'
      AutoPublish: true
      FunctionCode: !Sub
        - '${CloudFrontViewerRequestCode}'
        - Stage: !Ref Stage
          StageRoot: !Ref StageRoot
          StageRootUrl: !Ref StageRootUrl
          CloudFrontKeyValueStore: !GetAtt CloudFrontKeyValueStore.Id
      FunctionConfig:
        Comment: !Sub 'Created by SAM by ${AWS::StackName}'
        KeyValueStoreAssociations:
          - KeyValueStoreARN: !GetAtt CloudFrontKeyValueStore.Arn
        Runtime: cloudfront-js-2.0

  CloudFrontViewerResponse:
    Type: AWS::CloudFront::Function
    Properties:
      Name: !Sub '${AWS::StackName}-viewer-response'
      AutoPublish: true
      FunctionCode: !Sub
        - '${CloudFrontViewerResponseCode}'
        - Stage: !Ref Stage
      FunctionConfig:
        Comment: !Sub 'Created by SAM by ${AWS::StackName}'
        Runtime: cloudfront-js-2.0

  Route53:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref ZoneId
      RecordSets:
        - Name: !Sub '${StageRoot}.'
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2 # CloudFront alias
            DNSName: !GetAtt CloudFront.DomainName
        - Name: !Sub '${StageRoot}.'
          Type: AAAA
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2 # CloudFront alias
            DNSName: !GetAtt CloudFront.DomainName

  S3ReplicateFunction:
    Condition: ShouldReplicate
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/s3-replicate/
      Handler: index.handler
      Description: 'replicate cloudfront logs'
      Timeout: 6
      MemorySize: 128
      Environment:
        Variables:
          S3_BACKUP_BUCKET: !Ref S3BackupBucket
          S3_BACKUP_BUCKET_REGION: !Ref BackupRegion
      Policies:
        - Version: 2012-10-17
          Statement:
            - Sid: S3Read
              Action:
                - s3:GetObject
                - s3:GetObjectTagging
              Resource:
                - !Sub '${S3CloudFrontLogs.Arn}/*'
              Effect: Allow
        - Version: 2012-10-17
          Statement:
            - Sid: S3Write
              Action:
                - s3:PutObject
                - s3:PutObjectACL
                - s3:PutObjectTagging
              Resource:
                - !Sub 'arn:${AWS::Partition}:s3:::${S3BackupBucket}/*'
              Effect: Allow
        - SQSSendMessagePolicy:
            QueueName: !GetAtt LambdaDlq.QueueName
        - Version: 2012-10-17
          Statement:
            - Sid: CloudWatchLogGroup
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !GetAtt CloudWatchLogGroup.Arn
              Effect: Allow
      LoggingConfig:
        LogGroup: !Ref CloudWatchLogGroup
      Events:
        Trigger:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - 'aws.s3'
              detail-type:
                - 'Object Created'
              detail:
                bucket:
                  name:
                    - !Ref S3CloudFrontLogs
            DeadLetterConfig:
              Arn: !GetAtt EventsDlq.Arn
            RetryPolicy:
              MaximumEventAgeInSeconds: 900
              MaximumRetryAttempts: 3
      DeadLetterQueue:
        TargetArn: !GetAtt LambdaDlq.Arn
        Type: SQS
      EventInvokeConfig:
        DestinationConfig:
          OnFailure:
            Type: SQS
            Destination: !GetAtt LambdaDlq.Arn
        MaximumEventAgeInSeconds: 900
        MaximumRetryAttempts: 2
    Metadata:
      BuildMethod: makefile

  ApiJwtSecretChangedFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/api-jwt-secret-changed/
      Handler: index.handler
      Description: 'propagate jwt secret to cloudfront functions and invalidate authorizer cache'
      Timeout: 6
      MemorySize: 128
      Environment:
        Variables:
          REST_API_IDS: !Sub '${ApiGatewayRest},${ApiGatewayWeb},${ApiGatewayGraphQL}'
          KvsARN: !GetAtt CloudFrontKeyValueStore.Arn
          SSM_API_JWT_SECRET: !Sub /${Stack}/${Stage}/API_JWT_SECRET
          STAGE: !Ref Stage
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt LambdaDlq.QueueName
        - SSMParameterReadPolicy:
            ParameterName: !Sub ${Stack}/${Stage}/API_JWT_SECRET
        - Version: 2012-10-17
          Statement:
            - Sid: CloudWatchLogGroup
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !GetAtt CloudWatchLogGroup.Arn
              Effect: Allow
        - Version: 2012-10-17
          Statement:
            - Sid: ApiGateway
              Action:
                - 'apigateway:DELETE'
              Effect: Allow
              Resource:
                - !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}::/restapis/${ApiGatewayRest}/stages/${Stage}/cache/authorizers'
                - !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}::/restapis/${ApiGatewayWeb}/stages/${Stage}/cache/authorizers'
                - !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}::/restapis/${ApiGatewayGraphQL}/stages/${Stage}/cache/authorizers'
        - Version: 2012-10-17
          Statement:
            - Sid: CloudFrontKeyValueStore
              Action:
                - 'cloudfront-keyvaluestore:DescribeKeyValueStore'
                - 'cloudfront-keyvaluestore:GetKey'
                - 'cloudfront-keyvaluestore:PutKey'
              Effect: Allow
              Resource:
                - !GetAtt CloudFrontKeyValueStore.Arn
      LoggingConfig:
        LogGroup: !Ref CloudWatchLogGroup
      Events:
        Trigger:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - 'aws.ssm'
              detail-type:
                - 'Parameter Store Change'
              detail:
                name:
                  - !Sub /${Stack}/${Stage}/API_JWT_SECRET
                operation:
                  - Create
                  - Update
            DeadLetterConfig:
              Arn: !GetAtt EventsDlq.Arn
            RetryPolicy:
              MaximumEventAgeInSeconds: 900
              MaximumRetryAttempts: 3
      DeadLetterQueue:
        TargetArn: !GetAtt LambdaDlq.Arn
        Type: SQS
      EventInvokeConfig:
        DestinationConfig:
          OnFailure:
            Type: SQS
            Destination: !GetAtt LambdaDlq.Arn
        MaximumEventAgeInSeconds: 900
        MaximumRetryAttempts: 2
    Metadata:
      BuildMethod: makefile

Outputs:
  ApiJwtSecretChangedFunction:
    Description: lambda to propagate key changes
    Value: !GetAtt ApiJwtSecretChangedFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}ApiJwtSecretChangedFunction'

  DistributionId:
    Description: CloudFront distribution id
    Value: !Ref CloudFront
    Export:
      Name: !Sub '${AWS::StackName}DistributionId'
  S3CloudFrontLogsBucket:
    Description: S3 Bucket for cloudfront logs
    Value: !Ref S3CloudFrontLogs
    Export:
      Name: !Sub '${AWS::StackName}S3CloudFrontLogsBucket'
