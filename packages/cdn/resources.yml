Mappings:
  awsAccounts: ${file(../settings.json):awsAccounts}
Conditions:
  isWafEnabled: !Equals
    - !FindInMap
      - awsAccounts
      - !Ref 'AWS::AccountId'
      - wafEnabled
    - true
  captureUserLanguageAndDevice: !Equals
    - ${file(../settings.json):captureUserLanguageAndDevice}
    - true
Resources:
  eventsDlq: ${file(./resources/events-dlq.yml)}
  eventsDlqPolicy: ${file(./resources/events-dlq-policy.yml)}
  lambdaDlq: ${file(./resources/lambda-dlq.yml)}
  s3CloudFrontLogs: ${file(./resources/s3-cloudfront-logs.yml)}
  s3CloudFrontLogsPolicy: ${file(./resources/s3-cloudfront-logs-policy.yml)}
  s3Static: ${file(./resources/s3-static.yml)}
  s3StaticPolicy: ${file(./resources/s3-static-policy.yml)}
  s3Media: ${file(./resources/s3-media.yml)}
  s3MediaPolicy: ${file(./resources/s3-media-policy.yml)}
  s3ProtectedMedia: ${file(./resources/s3-protected-media.yml)}
  s3ProtectedMediaPolicy: ${file(./resources/s3-protected-media-policy.yml)}
  s3ProtectedMediaLogs: ${file(./resources/s3-protected-media-logs.yml)}
  s3ProtectedMediaLogsPolicy: ${file(./resources/s3-protected-media-logs-policy.yml)}
  cloudfrontHeadersPolicy: ${file(./resources/cloudfront-response-headers-policy.yml)}
  cloudfront: ${file(./resources/cloudfront.yml)}
  cloudfrontS3OriginAccessControl: ${file(./resources/cloudfront-s3-origin-access-control.yml)}
  cloudfrontViewerResponse: ${file(./resources/cloudfront-viewer-response.yml)}
  cloudfrontViewerRequest: ${file(./resources/cloudfront-viewer-request.yml)}
  route53: ${file(./resources/route53.yml)}
  apigwRest: ${file(./resources/apigw-rest.yml)}
  apigwRestMethod: ${file(./resources/apigw-rest-method.yml)}
  apigwRestStage: ${file(./resources/apigw-rest-stage.yml)}
  apigwRestDeployment: ${file(./resources/apigw-rest-deployment.yml)}
  apigwRestLogGroup ${file(./resources/apigw-rest-log-group.yml)}
  apigwWebSocket: ${file(./resources/apigw-websocket.yml)}
  apigwWebSocketLogGroup: ${file(./resources/apigw-websocket-log-group.yml)}
  apigwWebSocketStage: ${file(./resources/apigw-websocket-stage.yml)}
  staticCachePolicy: ${file(./resources/cache-policy-static.yml)}
  queryCachePolicy: ${file(./resources/cache-policy-query.yml)}
  basicOriginRequestPolicy: ${file(./resources/basic-origin-request-policy.yml)}
  websocketOriginRequestPolicy: ${file(./resources/websocket-origin-request-policy.yml)}
Outputs:
  deployedHash:
    Description: computed sha1 of stack
    Value: ${file(../hash.js):sha1}
    Export:
      Name: !Sub '${AWS::StackName}DeployedHash'
  deployedCommit:
    Description: git commit sha deployed
    Value: ${file(../git.js):shaCommit}
    Export:
      Name: !Sub '${AWS::StackName}DeployedCommit'
  distributionId:
    Description: cloudfront distribution id
    Value: !Ref cloudfront
    Export:
      Name: !Sub '${AWS::StackName}DistributionId'
  s3CloudFrontLogsBucket:
    Description: s3 bucket for cloudfront logs
    Value: !Ref s3CloudFrontLogs
    Export:
      Name: !Sub '${AWS::StackName}S3CloudFrontLogsBucket'
  s3StaticBucket:
    Description: s3 bucket for static content
    Value: !Ref s3Static
    Export:
      Name: !Sub '${AWS::StackName}S3StaticBucket'
  s3MediaBucket:
    Description: s3 bucket for media content
    Value: !Ref s3Media
    Export:
      Name: !Sub '${AWS::StackName}S3MediaBucket'
  s3ProtectedMediaBucket:
    Description: s3 bucket for protected media content
    Value: !Ref s3ProtectedMedia
    Export:
      Name: !Sub '${AWS::StackName}S3ProtectedMediaBucket'
  s3ProtectedMediaLogsBucket:
    Description: s3 bucket for protected media content access logs
    Value: !Ref s3ProtectedMediaLogs
    Export:
      Name: !Sub '${AWS::StackName}S3ProtectedMediaLogsBucket'
  apigwRest:
    Description: api gateway rest api
    Value: !Ref apigwRest
    Export:
      Name: !Sub '${AWS::StackName}ApigwRest'
  apigwRestRootResourceId:
    Description: api gateway rest api root resource id
    Value: !GetAtt apigwRest.RootResourceId
    Export:
      Name: !Sub '${AWS::StackName}ApigwRestRootResourceId'
  apigwHttp:
    Description: api gateway httpapi
    Value: !Ref apigwHttp
    Export:
      Name: !Sub '${AWS::StackName}ApigwHttp'
  apigwHttpApiAuthorizer:
    Description: api gateway httpapi authorizer
    Value: !Ref apigwHttpApiAuthorizer
    Export:
      Name: !Sub '${AWS::StackName}ApigwHttpApiAuthorizer'
  apigwHttpApiAnonymousAuthorizer:
    Description: api gateway httpapi authorizer allowing anonymous access
    Value: !Ref apigwHttpApiAnonymousAuthorizer
    Export:
      Name: !Sub '${AWS::StackName}ApigwHttpApiAnonymousAuthorizer'
  apigwRestApiAuthorizer:
    Description: api gateway restapi authorizer
    Value: !Ref apigwRestApiAuthorizer
    Export:
      Name: !Sub '${AWS::StackName}ApigwRestApiAuthorizer'
  apigwRestApiAnonymousAuthorizer:
    Description: api gateway restapi authorizer allowing anonymous access
    Value: !Ref apigwRestApiAnonymousAuthorizer
    Export:
      Name: !Sub '${AWS::StackName}ApigwRestApiAnonymousAuthorizer'
  apigwRestApiWafLogGroup:
    Condition: isWafEnabled
    Description: api gateway waf log group
    Value: !Ref apigwRestApiWafLogGroup
    Export:
      Name: !Sub '${AWS::StackName}ApigwRestApiWafLogGroup'
  apigwWebSocket:
    Description: api gateway websocket
    Value: !Ref apigwWebSocket
    Export:
      Name: !Sub '${AWS::StackName}ApigwWebSocket'
  webSocketAuthLambdaFunction:
    Description: lambda websocket authorizer
    Value: !GetAtt WebSocketAuthLambdaFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}WebSocketAuthLambdaFunction'
  webSocketAnonymousAuthLambdaFunction:
    Description: lambda websocket authorizer allowing anonymous access
    Value: !GetAtt WebSocketAnonymousAuthLambdaFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}WebSocketAnonymousAuthLambdaFunction'
