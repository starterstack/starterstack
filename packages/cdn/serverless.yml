service: ${file(../settings.js):stackName}-cdn
frameworkVersion: ${file(../settings.js):serverlessFrameworkVersion}
configValidationMode: error
package:
  individually: true
plugins:
  - serverless-iam-roles-per-function
  - serverless-plugin-scripts
  - serverless-prune-plugin
  - serverless-plugin-conditional-functions
  - serverless-offline
  - ./apigateway-deployment.mjs
  - ../generate-cloudwatch-alarms.mjs
  - ../default-tags.mjs
custom:
  serverless-offline:
    httpPort: 3010
    lambdaPort: 4010
  scripts:
    hooks:
      before:offline:start:init: |
        bash ../../scripts/functions-install.sh
      before:package:initialize: |
        bash ../../scripts/functions-install.sh
        bash ../../scripts/functions-test.sh
      before:remove:remove: |
        bash ../../scripts/empty-s3-bucket.sh \
          "${file(../settings.js):s3Media}"
        bash ../../scripts/empty-s3-bucket.sh \
          "${file(../settings.js):s3ProtectedMedia}"
        bash ../../scripts/empty-s3-bucket.sh \
          "${file(../settings.js):s3Static}"
        bash ../../scripts/empty-s3-bucket.sh \
          "${file(../settings.js):s3CloudFrontLogs}"
        bash ../../scripts/empty-s3-bucket.sh \
          "${file(../settings.js):s3ProtectedMediaLogs}"
      before:deploy:deploy: |
        bash ./scripts/patch-api-gateway-account.sh \
          "${opt:region}" \
          "${file(../settings.js):apiGatewayCloudwatchRole}"
      after:deploy:deploy: |
        bash ../../scripts/tag-eventbus-rules.sh \
          "${self:service}-${opt:stage}" \
          "${opt:region}" \
          "${opt:stage}"
        bash ../../scripts/tag-cloudwatch-alarms.sh \
          "${self:service}-${opt:stage}" \
          "${opt:region}" \
          "${opt:stage}"
  prune:
    automatic: true
    number: 3
provider:
  name: aws
  stage: ${opt:stage}
  region: ${opt:region}
  deploymentBucket: ${file(../settings.js):deploymentBucket}
  tags: ${file(../settings.js):defaultTags}
  stackTags: ${file(../settings.js):stackTags}
  versionFunctions: true
  environment:
    GIT_COMMIT: ${file(../git.js):shaCommit}
  tracing:
    lambda: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - xray:PutTelemetryRecords
            - xray:PutTraceSegments
          Resource: '*'
  logRetentionInDays: ${file(../settings.js):defaultLogRetentionInDays}
  notificationArns:
    - ${file(../settings.js):snsOpsTopic}
functions: ${file(./functions.yml)}
resources: ${file(./resources.yml)}
