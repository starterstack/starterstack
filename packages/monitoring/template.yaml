AWSTemplateFormatVersion: 2010-09-09
Transform:
  - AWS::Serverless-2016-10-31

Description: Monitoring

Globals:
  Function:
    Tracing: Active
    Architectures:
      - arm64
    Runtime: nodejs20.x
    MemorySize: 128
    PropagateTags: true
    Environment:
      Variables:
        GIT_COMMIT: !Ref GITCommit

Parameters:
  Stack:
    Type: String
  LogRetentionInDays:
    Type: String
  SNSOpsTopic:
    Type: String
  GITCommit:
    Type: String

Metadata:
  expand:
    plugins:
      - '../git.mjs'
      - '../hash.mjs'
      - '../stack-stage-config.mjs'
      - './cloudwatch-alarm-lambda-concurrency.mjs'
      - '@starterstack/sam-expand/plugins/parameter-overrides'
      - '@starterstack/sam-expand/plugins/run-script-hooks'
      - '../purge-lambda-versions.mjs'
      - '../generate-cloudwatch-alarms.mjs'
    config:
      stackStageConfig:
        regions: account
        suffixStage: false
        stage: global
        addMappings: true
      parameterOverrides:
        - location: ../stack-stage-config.mjs
          overrides:
            - name: LogRetentionInDays
              exportName: logRetentionInDays
            - name: SNSOpsTopic
              exportName: snsOpsTopic
        - location: ../git.mjs
          overrides:
            - name: GITCommit
              exportName: commit
      purgeLambdaVersions:
        keep: 3
      script:
        hooks:
          post:deploy:
            - command: ../tag-cloudwatch-alarms.sh
              args:
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: stackName
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: region
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: stage
      alarms:
        snsTopicRef: SNSAlarmTopic

Conditions:
  IsCloudwatchAlertsEnabled: !Equals
    - !FindInMap
      - AWSAccounts
      - !Ref 'AWS::AccountId'
      - cloudwatchAlertsEnabled
    - true

Resources:
  SNSAlarmTopic:
    Type: AWS::SNS::Topic
    Properties:
      Tags:
        - Key: 'Name'
          Value: !Sub ${AWS::StackName}SNSAlarmTopic
        - Key: 'ManagedBy'
          Value: !Ref Stack
  SNSAlarmTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - sns:Publish
            Effect: Allow
            Resource: !Ref SNSAlarmTopic
            Principal:
              Service:
                - cloudwatch.amazonaws.com
                - budgets.amazonaws.com
            Condition:
              StringEquals:
                AWS:SourceAccount: !Sub '${AWS::AccountId}'
      Topics:
        - !Ref SNSAlarmTopic

  EventsDlq:
    Type: AWS::SQS::Queue
    Properties:
      SqsManagedSseEnabled: true
      Tags:
        - Key: 'Name'
          Value: !Sub ${AWS::StackName}-events-dlq
        - Key: 'ManagedBy'
          Value: !Ref Stack

  EventsDlqPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - 'sqs:SendMessage'
            Principal:
              Service: 'events.amazonaws.com'
            Resource: !GetAtt EventsDlq.Arn
            Condition:
              ArnEquals:
                'aws:SourceArn':
                  - !Sub 'arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/${AWS::StackName}*'
          - Effect: Allow
            Action:
              - 'sqs:SendMessage'
            Principal:
              Service: 'sns.amazonaws.com'
            Resource: !GetAtt EventsDlq.Arn
            Condition:
              ArnEquals:
                'aws:SourceArn':
                  - !Sub 'arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:${AWS::StackName}*'
      Queues:
        - !Ref EventsDlq

  LambdaDlq:
    Type: AWS::SQS::Queue
    Properties:
      SqsManagedSseEnabled: true
      Tags:
        - Key: 'Name'
          Value: !Sub ${AWS::StackName}-lambda-dlq
        - Key: 'ManagedBy'
          Value: !Ref Stack
  CloudWatchAlarmDynamoDBUserErrors:
    Type: AWS::CloudWatch::Alarm
    Condition: IsCloudwatchAlertsEnabled
    Properties:
      AlarmActions:
        - !Ref SNSAlarmTopic
      AlarmDescription: !Sub '${AWS::StackName} dynamodb user errors > 0'
      AlarmName: !Sub '${AWS::StackName} dynamodb user errors > 0'
      ComparisonOperator: 'GreaterThanThreshold'
      MetricName: 'UserErrors'
      Namespace: 'AWS/DynamoDB'
      Statistic: 'Sum'
      Unit: 'Count'
      EvaluationPeriods: 1
      Period: 60
      Threshold: 0
      TreatMissingData: 'notBreaching'

  CloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}
      RetentionInDays: !Ref LogRetentionInDays
      Tags:
        - Key: 'Name'
          Value: !Sub '${AWS::StackName} lambda logs'
        - Key: 'ManagedBy'
          Value: !Ref Stack

  StackChangeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/stack-change/
      Handler: index.handler
      Description: subscription to cloudformation stack changes
      Timeout: 30
      Environment:
        Variables:
          SSM_SLACK_URL: !Sub /${Stack}/global/SLACK_OPS_URL
      DeadLetterQueue:
        TargetArn: !GetAtt LambdaDlq.Arn
        Type: SQS
      Events:
        SNSEvent:
          Type: SNS
          Properties:
            Topic: !Ref SNSOpsTopic
            RedrivePolicy:
              deadLetterTargetArn: !GetAtt EventsDlq.Arn
      EventInvokeConfig:
        DestinationConfig:
          OnFailure:
            Type: SQS
            TargetArn: !GetAtt LambdaDlq.Arn
        MaximumEventAgeInSeconds: 900
        MaximumRetryAttempts: 2
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt LambdaDlq.Arn
        - SSMParameterReadPolicy:
            ParameterName: !Sub ${Stack}/global/SLACK_OPS_URL
        - Version: 2012-10-17
          Statement:
            - Sid: CloudWatchLogGroup
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !GetAtt CloudWatchLogGroup.Arn
              Effect: Allow
      LoggingConfig:
        LogGroup: !Ref CloudWatchLogGroup
    Metadata:
      BuildMethod: makefile

  NotifyAlarmFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/notify-alarm/
      Handler: index.handler
      Description: subscription to cloudformation stack alarms
      Timeout: 30
      Environment:
        Variables:
          SSM_SLACK_URL: !Sub /${Stack}/global/SLACK_ALARM_URL
      DeadLetterQueue:
        TargetArn: !GetAtt LambdaDlq.Arn
        Type: SQS
      Events:
        SNSEvent:
          Type: SNS
          Properties:
            Topic: !Ref SNSAlarmTopic
            RedrivePolicy:
              deadLetterTargetArn: !GetAtt EventsDlq.Arn
      EventInvokeConfig:
        DestinationConfig:
          OnFailure:
            Type: SQS
            TargetArn: !GetAtt LambdaDlq.Arn
        MaximumEventAgeInSeconds: 900
        MaximumRetryAttempts: 2
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt LambdaDlq.Arn
        - SSMParameterReadPolicy:
            ParameterName: !Sub ${Stack}/global/SLACK_ALARM_URL
        - Version: 2012-10-17
          Statement:
            - Sid: CloudWatchLogGroup
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !GetAtt CloudWatchLogGroup.Arn
              Effect: Allow
      LoggingConfig:
        LogGroup: !Ref CloudWatchLogGroup
    Metadata:
      BuildMethod: makefile

Outputs:
  SNSAlarmTopic:
    Description: sns topic for alarms
    Value: !Ref SNSAlarmTopic
    Export:
      Name: !Sub '${AWS::StackName}SNSAlarmTopic'
