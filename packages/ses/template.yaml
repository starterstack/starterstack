AWSTemplateFormatVersion: 2010-09-09
Transform:
  - AWS::LanguageExtensions
  - AWS::Serverless-2016-10-31

Description: SES

Globals:
  Function:
    Tracing: Active
    Architectures:
      - arm64
    Runtime: nodejs20.x
    PropagateTags: true
    Environment:
      Variables:
        GIT_COMMIT: !Ref GITCommit

Parameters:
  Stack:
    Type: String
  StackDisplayName:
    Type: String
  Stage:
    Type: String
  StageRoot:
    Type: String
  EventBus:
    Type: String
  S3BackupBucket:
    Type: String
  BackupRegion:
    Type: String
  AccountPerStage:
    Type: String
  LogRetentionInDays:
    Type: String
  GITCommit:
    Type: String
  ZoneId:
    Type: String
  SNSAlarmTopic:
    Type: String

Metadata:
  expand:
    plugins:
      - '../git.mjs'
      - '../hash.mjs'
      - '../stack-stage-config.mjs'
      - '@starterstack/sam-expand/plugins/parameter-overrides'
      - '@starterstack/sam-expand/plugins/run-script-hooks'
      - '../purge-lambda-versions.mjs'
      - '../generate-cloudwatch-alarms.mjs'
    config:
      stackStageConfig:
        suffixStage: true
        addMappings: true
        region: 'eu-west-1'
      parameterOverrides:
        - location: ../stack-stage-config.mjs
          overrides:
            - name: StageRoot
              exportName: stageOrStackRoot
            - name: EventBus
              exportName: eventBus
            - name: AccountPerStage
              exportName: accountPerStage
            - name: S3BackupBucket
              exportName: ssmS3LogBucket
            - name: BackupRegion
              exportName: backupRegion
            - name: LogRetentionInDays
              exportName: logRetentionInDays
            - name: ZoneId
              exportName: zoneId
            - name: SNSAlarmTopic
              exportName: snsAlarmTopic
        - location: ../git.mjs
          overrides:
            - name: GITCommit
              exportName: commit
        - location: ../settings.json
          overrides:
            - name: StackDisplayName
              exportName: stackDisplayName
      purgeLambdaVersions:
        keep: 3
      script:
        hooks:
          pre:delete:
            - command: ../empty-s3-bucket.sh
              args:
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: s3Mail
          post:deploy:
            - command: ../tag-cloudwatch-alarms.sh
              args:
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: stackName
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: region
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: stage
            - command: ../tag-eventbus-rules.sh
              args:
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: stackName
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: region
                - file:
                    location: ../stack-stage-config.mjs
                    exportName: stage
      alarms:
        snsTopicRef: SNSAlarmTopic

Conditions:
  IsAccountPerStage: !Equals
    - !Ref AccountPerStage
    - 'true'

Resources:
  CloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}
      RetentionInDays: !Ref LogRetentionInDays
      Tags:
        - Key: 'Name'
          Value: !Sub '${AWS::StackName} lambda logs'
        - Key: 'ManagedBy'
          Value: !Ref Stack
  EventsDlq:
    Type: AWS::SQS::Queue
    Properties:
      SqsManagedSseEnabled: true
      Tags:
        - Key: 'Name'
          Value: !Sub '${AWS::StackName}-events-dlq'
        - Key: 'ManagedBy'
          Value: !Ref Stack
  EventsDlqPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - 'sqs:SendMessage'
            Principal:
              Service: 'events.amazonaws.com'
            Resource: !GetAtt EventsDlq.Arn
            Condition:
              ArnEquals:
                'aws:SourceArn': !Sub 'arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/${AWS::StackName}*'
          - Effect: Allow
            Action:
              - 'sqs:SendMessage'
            Principal:
              Service: 'sns.amazonaws.com'
            Resource: !GetAtt EventsDlq.Arn
            Condition:
              ArnEquals:
                'aws:SourceArn': !Sub 'arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:${AWS::StackName}*'
      Queues:
        - !Ref EventsDlq
  LambdaDlq:
    Type: AWS::SQS::Queue
    Properties:
      SqsManagedSseEnabled: true
      Tags:
        - Key: 'Name'
          Value: !Sub ${AWS::StackName}-lambda-dlq
        - Key: 'ManagedBy'
          Value: !Ref Stack

  SNSEmailDeliveryTopic:
    Type: AWS::SNS::Topic
    Properties:
      Tags:
        - Key: 'Name'
          Value: !Sub '${AWS::StackName}-sns-email-delivery-topic'
        - Key: 'ManagedBy'
          Value: !Ref Stack

  SNSEmailDeliveryTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - sns:Publish
            Effect: Allow
            Resource: !Ref SNSEmailDeliveryTopic
            Principal:
              Service:
                - ses.amazonaws.com
            Condition:
              StringEquals:
                AWS:SourceAccount: !Sub '${AWS::AccountId}'
      Topics:
        - !Ref SNSEmailDeliveryTopic

  VerifySES:
    Type: 'Custom::VerifySES'
    Properties:
      ServiceToken: !GetAtt VerifySESFunction.Arn
      Domain: !Ref StageRoot
      StackName: !Ref Stack
      Commit: !Ref GITCommit
      ConfigurationSet: !Sub '${Stack}-${Stage}-ssl-only'
      ZoneId: !Ref ZoneId
      SnsDestinationTopicArn: !Ref SNSEmailDeliveryTopic
      Region: !Sub '${AWS::Region}'
      RuleSet: !Sub 'sesRuleSet-${Stack}-${AWS::Region}'
      Stage: !Sub '${Stage}'

  S3Mail:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: TransitionToIntelligentTiering
            Status: Enabled
            Transitions:
              - StorageClass: INTELLIGENT_TIERING
                TransitionInDays: 0
          - Id: ExpireNonCurrent
            ExpiredObjectDeleteMarker: true
            Status: Enabled
          - Id: NonCurrentRetention
            Status: Enabled
            NoncurrentVersionExpiration:
              NewerNoncurrentVersions: 3
              NoncurrentDays: 7
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: 'Name'
          Value: !Sub ${AWS::StackName}-s3-mail
        - Key: 'ManagedBy'
          Value: !Sub Stack

  S3MailPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Mail
      PolicyDocument:
        Version: '2012-10-17'
        Id: PolicyForSESRuleSet
        Statement:
          - Effect: Deny
            Action: 's3:*'
            Resource:
              - !Sub '${S3Mail.Arn}'
              - !Sub '${S3Mail.Arn}/*'
            Principal: '*'
            Condition:
              Bool:
                'aws:SecureTransport': false
          - Effect: Allow
            Action:
              - 's3:PutObject'
            Resource:
              - !Sub '${S3Mail.Arn}/*'
            Principal:
              Service: ses.amazonaws.com
            Condition:
              Bool:
                'aws:SecureTransport': true
              StringEquals:
                AWS:SourceAccount: !Sub '${AWS::AccountId}'
              ArnLike:
                AWS:SourceArn: !Sub 'arn:${AWS::Partition}:ses:${AWS::Region}:${AWS::AccountId}:receipt-rule-set/${VerifySES.RuleSet}:receipt-rule/${AWS::StackName}-ses-rule'

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt SESReceiveFunction.Arn
      Action: lambda:InvokeFunction
      Principal: ses.amazonaws.com
      SourceAccount: !Sub ${AWS::AccountId}
      SourceArn: !Sub 'arn:${AWS::Partition}:ses:${AWS::Region}:${AWS::AccountId}:receipt-rule-set/${VerifySES.RuleSet}:receipt-rule/${AWS::StackName}-ses-rule'

  SESRule:
    DependsOn:
      - S3MailPolicy
      - LambdaPermission
    Type: 'AWS::SES::ReceiptRule'
    Properties:
      Rule:
        Name: !Sub '${AWS::StackName}-ses-rule'
        Recipients:
          - !Sub 'hello@${StageRoot}'
        Actions:
          - S3Action:
              BucketName: !Ref S3Mail
          - LambdaAction:
              FunctionArn: !GetAtt SESReceiveFunction.Arn
              InvocationType: Event
        Enabled: true
        ScanEnabled: true
        TlsPolicy: Require
      RuleSetName: !GetAtt VerifySES.RuleSet

  SESTemplateLoginSignupEn:
    Type: AWS::SES::Template
    Properties:
      Template:
        SubjectPart: 'Login/Signup to ${file(../settings.js):stageRoot}'
        HtmlPart: |
          <h1>Welcome {{email}}</h1>
          <p>Click the following link to login to your account:</p>
          <p>
            <a href={{loginUrl}}>Login</a>
          </p>
          <p>If you did not initiate this request, just ignore this email. The request will expire shortly.</p>
          <p>Kind regards {{team}}</p>
        TextPart: |
          Welcome {{email}}
          Open the following url in a browser to login to your account:
          {{loginUrl}}
          If you did not initiate this request, just ignore this email. The request will expire shortly.
          Kind regards {{team}}

  SESTemplateHelloResponseEn:
    Type: AWS::SES::Template
    Properties:
      Template:
        SubjectPart: 'Thank you!'
        HtmlPart: |
          <h1>Hi {{email}}</h1>
          <p>We have processed your mail.</p>
          <p>Kind regards {{team}}</p>
        TextPart: |
          Hi {{email}}
          We have processed your mail.
          Kind regards {{team}}

  CloudWatchAlarmSESBounceRate:
    Type: AWS::CloudWatch::Alarm
    Condition: IsCloudwatchAlertsEnabled
    Properties:
      AlarmActions:
        - !Ref SNSAlarmTopic
      AlarmDescription: !Sub '${AWS::StackName} reputation bounce rate 50% of the recommended warning level'
      AlarmName: !Sub '${AWS::StackName} reputation bounce rate 50% of the recommended warning level'
      ComparisonOperator: 'GreaterThanOrEqualToThreshold'
      MetricName: 'Reputation.BounceRate'
      Namespace: 'AWS/SES'
      Statistic: 'Maximum'
      EvaluationPeriods: 1
      Period: 3600
      Threshold: 0.025

  CloudWatchAlarmSESComplaintRate:
    Type: AWS::CloudWatch::Alarm
    Condition: IsCloudwatchAlertsEnabled
    Properties:
      AlarmActions:
        - !Ref SNSAlarmTopic
      AlarmDescription: !Sub '${AWS::StackName} reputation complaint rate 50% of the recommended warning level'
      AlarmName: !Sub '${AWS::StackName} reputation complaint rate 50% of the recommended warning level'
      ComparisonOperator: 'GreaterThanOrEqualToThreshold'
      MetricName: 'Reputation.ComplaintRate'
      Namespace: 'AWS/SES'
      Statistic: 'Average'
      EvaluationPeriods: 2
      Period: 3600
      Threshold: 0.0005

  VerifySESFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/verify-ses/
      Handler: index.handler
      Description: 'Custom resource to configure ses'
      Timeout: 6
      MemorySize: 128
      LoggingConfig:
        LogGroup: !Ref CloudWatchLogGroup
      Policies:
        - Version: 2012-10-17
          Statement:
            - Sid: SESReceipt
              Effect: Allow
              Action:
                - 'ses:DescribeActiveReceiptRuleSet'
                - 'ses:CreateReceiptRuleSet'
                - 'ses:SetActiveReceiptRuleSet'
              Resource: '*'
            - Sid: SESIdentity
              Effect: Allow
              Action:
                - 'ses:CreateEmailIdentity'
                - 'ses:DeleteEmailIdentity'
                - 'ses:GetEmailIdentity'
                - 'ses:TagResource'
                - 'ses:PutEmailIdentityMailFromAttributes'
              Resource: !Sub 'arn:${AWS::Partition}:ses:${AWS::Region}:${AWS::AccountId}:identity/${StageRoot}'
            - Sid: SESConfigurationSet
              Effect: Allow
              Action:
                - 'ses:CreateConfigurationSet'
                - 'ses:CreateConfigurationSetEventDestination'
                - 'ses:DeleteConfigurationSet'
                - 'ses:DeleteConfigurationSetEventDestination'
                - 'ses:TagResource'
              Resource: !Sub 'arn:${AWS::Partition}:ses:${AWS::Region}:${AWS::AccountId}:configuration-set/${Stack}-${Stage}*'
            - Sid: Route53
              Effect: Allow
              Action:
                - 'route53:ChangeResourceRecordSets'
              Resource: !Sub 'arn:${AWS::Partition}:route53:::hostedzone/${ZoneId}'
    Metadata:
      BuildMethod: makefile

  SESEventsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/events/
      Handler: index.handler
      Description: 'SES events'
      Timeout: 6
      MemorySize: 128
      LoggingConfig:
        LogGroup: !Ref CloudWatchLogGroup
      Environment:
        Variables:
          EVENTBRIDGE_BUS_NAME: !Ref EventBus
          STACK_NAME: !Ref Stack
          AWS_ACCOUNT_ID: !Sub ${AWS::AccountId}
          STAGE: !Ref Stage
          REGION: !Sub ${AWS::Region}
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt LambdaDlq.Arn
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref EventBus
      Events:
        SNSEvent:
          Type: SNS
          Properties:
            Topic: !Ref SNSEmailDeliveryTopic
            RedrivePolicy:
              deadLetterTargetArn: !GetAtt EventsDlq.Arn
      DeadLetterQueue:
        TargetArn: !GetAtt LambdaDlq.Arn
        Type: SQS
      EventInvokeConfig:
        DestinationConfig:
          OnFailure:
            Type: SQS
            TargetArn: !GetAtt LambdaDlq.Arn
        MaximumEventAgeInSeconds: 300
        MaximumRetryAttempts: 2
    Metadata:
      BuildMethod: makefile

  SESReceiveFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/ses-receive/
      Handler: index.handler
      Description: 'ses receive incoming hello mail'
      Timeout: 6
      MemorySize: 128
      LoggingConfig:
        LogGroup: !Ref CloudWatchLogGroup
      Environment:
        Variables:
          S3_MAIL_BUCKET: !Ref S3Mail
          EVENTBRIDGE_BUS_NAME: !Ref EventBus
          TEAM: !Sub '${StackDisplayName}Team'
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt LambdaDlq.Arn
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref EventBus
        - Version: 2012-10-17
          Statement:
            - Sid: S3
              Effect: Allow
              Action:
                - 's3:GetObject'
                - 's3:PutObject'
                - 's3:PutObjectTagging'
              Resource:
                - !Sub '${S3Mail.Arn}/*'
      DeadLetterQueue:
        TargetArn: !GetAtt LambdaDlq.Arn
        Type: SQS
      EventInvokeConfig:
        DestinationConfig:
          OnFailure:
            Type: SQS
            TargetArn: !GetAtt LambdaDlq.Arn
        MaximumEventAgeInSeconds: 900
        MaximumRetryAttempts: 2
    Metadata:
      BuildMethod: makefile

  S3ReplicateFunction:
    Condition: IsAccountPerStage
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/s3-replicate/
      Handler: index.handler
      Description: 'replicate s3mail'
      Timeout: 6
      MemorySize: 128
      Environment:
        Variables:
          S3_BACKUP_BUCKET: !Ref S3BackupBucket
          S3_BACKUP_BUCKET_REGION: !Ref BackupRegion
      Policies:
        - Version: 2012-10-17
          Statement:
            - Sid: S3Read
              Action:
                - s3:GetObject
                - s3:GetObjectTagging
              Resource:
                - !Sub '${S3Mail.Arn}/*'
              Effect: Allow
        - Version: 2012-10-17
          Statement:
            - Sid: S3Write
              Action:
                - s3:PutObject
                - s3:PutObjectACL
                - s3:PutObjectTagging
              Resource:
                - !Sub 'arn:${AWS::Partition}:s3:::${S3BackupBucket}/*'
              Effect: Allow
        - SQSSendMessagePolicy:
            QueueName: !GetAtt LambdaDlq.Arn
        - Version: 2012-10-17
          Statement:
            - Sid: CloudWatchLogGroup
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !GetAtt CloudWatchLogGroup.Arn
              Effect: Allow
      LoggingConfig:
        LogGroup: !Ref CloudWatchLogGroup
      Events:
        Trigger:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - 'aws.s3'
              detail-type:
                - 'Object Created'
              detail:
                bucket:
                  name:
                    - !Ref S3Mail
            DeadLetterConfig:
              Arn: !GetAtt EventsDlq.Arn
            RetryPolicy:
              MaximumEventAgeInSeconds: 900
              MaximumRetryAttempts: 3
      DeadLetterQueue:
        TargetArn: !GetAtt LambdaDlq.Arn
        Type: SQS
      EventInvokeConfig:
        DestinationConfig:
          OnFailure:
            Type: SQS
            TargetArn: !GetAtt LambdaDlq.Arn
        MaximumEventAgeInSeconds: 900
        MaximumRetryAttempts: 2
    Metadata:
      BuildMethod: makefile

Outputs:
  S3MailBucket:
    Description: S3 Bucket for storing emails
    Value: !Ref S3Mail
    Export:
      Name: !Sub '${AWS::StackName}S3MediaBucket'
  SESDefaultConfigurationSet:
    Description: Default configuration set
    Value: !GetAtt VerifySES.ConfigurationSet
    Export:
      Name: !Sub '${AWS::StackName}SESDefaultConfigurationSet'
  SNSEmailDeliveryTopic:
    Description: SNS topic for email delivery events
    Value: !Ref SNSEmailDeliveryTopic
    Export:
      Name: !Sub '${AWS::StackName}SNSEmailDeliveryTopic'
  SESTemplateLoginSignupEn:
    Description: SES template for login and signup (en)
    Value: !Ref SESTemplateLoginSignupEn
    Export:
      Name: !Sub '${AWS::StackName}SESTemplateLoginSignupEn'
  SESTemplateHelloResponseEn:
    Description: SES template for hello response (en)
    Value: !Ref SESTemplateHelloResponseEn
    Export:
      Name: !Sub '${AWS::StackName}SESTemplateHelloResponseEn'
