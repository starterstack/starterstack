import { createRequire } from 'node:module'
import { dirname } from 'node:path'
import { fileURLToPath } from 'node:url'
const require = createRequire(import.meta.url)
const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)
import p from"node:process";async function c({context:t,name:o,url:n,success:y}){if(!p.env.SLACK_WEBHOOK_URL)return;let s=`${t.payload.repository.html_url}/actions/runs/${t.runId}`,e=t?.payload?.pull_request,i=t?.payload?.head_commit,a=e?.html_url??i?.url,d=e?`Pull request #${e.number}`:t.sha?.slice?.(0,7),m={blocks:[{type:"header",text:{type:"plain_text",text:`GitHub Actions Run ${y?":white_check_mark:":"failed :x:"}`,emoji:!0}},{type:"section",text:{type:"mrkdwn",text:`*${t.workflow} / ${t.eventName}*`}},{type:"divider"},t.workflow==="delete stage"?{type:"section",text:{type:"mrkdwn",text:`<${s}|delete environment run> ${o} by ${t.actor}`}}:t.workflow==="automerge"?{type:"section",text:{type:"mrkdwn",text:`<${s}|automerge run> by ${t.actor}`}}:{type:"section",text:{type:"mrkdwn",text:`<${s}|deploy environment run> to ${n?`<${n}|${o}>`:o} by ${t.actor}`}},a&&{type:"section",text:{type:"mrkdwn",text:`<${a}|${d}>`}},{type:"section",text:{type:"mrkdwn",text:`${e?.title??i?.message??"triggered manually"}`}}].filter(Boolean)},r=await fetch(p.env.SLACK_WEBHOOK_URL,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(m)});if(r.status<200||r.status>299)throw new Error(`failed to fetch ${r.status}`);let l=await r.text();if(l!=="ok")throw new Error(`failed to fetch ${l}`)}export{c as default};
